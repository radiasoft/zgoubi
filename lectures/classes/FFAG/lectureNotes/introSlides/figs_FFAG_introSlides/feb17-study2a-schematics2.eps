%!PS-Adobe-2.0 EPSF-2.0
%%Title: feb17-study2a-schematics2.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3d
%%CreationDate: Tue Mar  2 13:04:55 2004
%%For: jcg@beethoven.cap.bnl.gov (Juan C. Gallardo,901-A room 119,631-344-3523,)
%%BoundingBox: 0 0 526 635
%%Magnification: 0.9500
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 635 moveto 0 0 lineto 526 0 lineto 526 635 lineto closepath clip newpath
0.7 633.6 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#055 /minus 8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /hyphen 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Helvetica-Bold /Helvetica-Bold-iso isovec ReEncode
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
 0.05984 0.05984 sc
%
% Fig objects follow
%
% Polyline
7.500 slw
n 0 0 m 8760 0 l 8760 10575 l 0 10575 l
 cp gs col31 1.00 shd ef gr gs col1 s gr 
% Arc
30.000 slw
n 5944.6 4484.7 158.3 -151.9 11.1 arcn
gs col4 s gr

% Arc
n 6493.3 3169.9 158.1 -159.7 26.3 arc
gs col4 s gr

% Arc
15.000 slw
n 3564.4 9219.2 456.3 147.4 -3.0 arcn
gs col0 s gr

% Arc
n 1230.0 9611.0 289.0 -146.1 -33.9 arcn
gs col0 s gr

% Arc
n 960.0 7455.0 244.2 -10.6 -79.4 arcn
gs col0 s gr

% Arc
n -592.5 8407.5 1996.3 25.1 31.5 arc
gs col0 s gr

% Arc
n 1257.4 9780.6 361.9 -114.0 -72.7 arcn
gs col0 s gr

% Arc
n 1412.1 9246.4 198.5 173.2 108.2 arcn
gs col0 s gr

% Arc
n 2175.0 8385.0 1285.5 138.3 124.1 arcn
gs col0 s gr

% Arc
n -157.5 8167.5 1730.0 38.3 47.1 arc
gs col0 s gr

% Arc
n 1541.8 7555.4 365.8 -159.1 -103.7 arc
gs col0 s gr

% Arc
n 1215.0 7038.8 289.1 146.1 33.9 arc
gs col0 s gr

% Arc
n 1641.9 7210.0 462.3 154.4 -30.6 arc
gs col0 s gr

30.000 slw
% Ellipse
n 1597 990 653 653 0 360 DrawEllipse gs col4 s gr

% Ellipse
n 4995 9202 947 947 0 360 DrawEllipse gs col1 s gr

% Ellipse
n 6052 6682 1166 1166 0 360 DrawEllipse gs col1 s gr

% Polyline
7.500 slw
n 0 0 m
 0 6300 l gs col0 s gr 
% Polyline
n 900 360 m 990 360 l 990 675 l 900 675 l
 cp gs col0 s gr 
% Polyline
n 945 270 m 945 405 l
 945 315 l gs col0 s gr 
% Polyline
n 0 6300 m
 0 9585 l gs col0 s gr 
% Polyline
n 0 9540 m
 0 10575 l gs col0 s gr 
% Polyline
n 900 0 m 990 0 l 990 270 l 900 270 l
 cp gs /PC [[1.00 1.00 1.00] [1.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 60.00 0.00] PATmp PATsp ef gr PATusp gs col4 s gr 
% Polyline
n 945 100 m
 945 1350 l gs /PC [[1.00 1.00 1.00] [1.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 63.00 6.67] PATmp PATsp ef gr PATusp gs col4 s gr 
% Polyline
15.000 slw
n 915 2475 m 810 2475 810 3045 105 arcto 4 {pop} repeat
  810 3150 975 3150 105 arcto 4 {pop} repeat
  1080 3150 1080 2580 105 arcto 4 {pop} repeat
  1080 2475 915 2475 105 arcto 4 {pop} repeat
 cp gs col1 1.00 shd ef gr gs col0 s gr 
% Polyline
n 915 3150 m 810 3150 810 3405 105 arcto 4 {pop} repeat
  810 3510 975 3510 105 arcto 4 {pop} repeat
  1080 3510 1080 3255 105 arcto 4 {pop} repeat
  1080 3150 915 3150 105 arcto 4 {pop} repeat
 cp gs /PC [[0.53 0.81 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 54.00 210.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 850 4725 m 1000 4725 l 1000 6075 l 850 6075 l
 cp gs col2 1.00 shd ef gr gs col0 s gr 
% Polyline
n 945 4500 m
 945 4680 l gs col0 s gr 
% Polyline
n 945 3510 m 945 3780 l
 945 3735 l gs col0 s gr 
% Polyline
7.500 slw
n 915 3780 m 810 3780 810 4395 105 arcto 4 {pop} repeat
  810 4500 975 4500 105 arcto 4 {pop} repeat
  1080 4500 1080 3885 105 arcto 4 {pop} repeat
  1080 3780 915 3780 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 1.00 1.00] [1.00 0.00 1.00]] def
15.00 15.00 sc P1 [16 0 0 -8 54.00 252.00] PATmp PATsp ef gr PATusp gs col5 s gr 
% Polyline
15.000 slw
n 945 1820 m
 945 2520 l gs col0 s gr 
% Polyline
n 945 1035 m
 945 1710 l gs col0 s gr 
% Polyline
7.500 slw
n 955 1845 m 1033 1800 l 1033 1710 l 955 1665 l 877 1710 l 877 1800 l

 cp gs col4 1.00 shd ef gr gs col4 s gr 
% Polyline
n 810 1620 m 1080 1620 l 1080 1935 l 810 1935 l
 cp gs col1 s gr 
% Polyline
15.000 slw
n 4095 8910 m
 4905 6480 l gs col0 s gr 
% Polyline
n 5040 6120 m
 5805 4365 l gs col0 s gr 
% Polyline
30.000 slw
n 6112 4515 m
 6652 3210 l gs col4 s gr 
% Polyline
60.000 slw
gs  clippath
6836 1947 m 6724 1905 l 6557 2350 l 6719 2090 l 6670 2392 l cp
eoclip
n 6775 1941 m
 6355 3066 l gs col12 s gr gr

% arrowhead
n 6670 2392 m 6719 2090 l 6557 2350 l 6635 2314 l 6670 2392 l 
 cp gs col12 1.00 shd ef gr  col12 s
% Polyline
30.000 slw
n 5790 4423 m
 6330 3110 l gs col4 s gr 
% Polyline
15.000 slw
n 900 6075 m
 900 8000 l gs col0 s gr 
% Polyline
n 900 7965 m
 1125 8325 l gs col0 s gr 
% Polyline
n 1125 7425 m 1305 7425 l 1305 9225 l 1125 9225 l
 cp gs col2 1.00 shd ef gr gs col0 s gr 
% Polyline
n 2040 6975 m 3180 9495 l
 3180 9450 l gs col0 s gr 
/Symbol ff 390.00 scf sf
6615 3780 m
gs 1 -1 sc (m) col4 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
6975 4230 m
gs 1 -1 sc (Ring) col4 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
1710 10110 m
gs 1 -1 sc (1.5 - 5.0 GeV) col4 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
2250 450 m
gs 1 -1 sc (Proton Driver) col18 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
2250 1530 m
gs 1 -1 sc (Hg  Target ) col4 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
2250 2070 m
gs 1 -1 sc (Capture ) col4 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
2250 2520 m
gs 1 -1 sc (Drift ) col0 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
2250 3150 m
gs 1 -1 sc (Buncher ) col10 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
2250 3780 m
gs 1 -1 sc (Bunch Rotation ) col8 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
2250 4500 m
gs 1 -1 sc (Cooling ) col5 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
2250 5400 m
gs 1 -1 sc (Acceleration ) col12 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
2250 5850 m
gs 1 -1 sc (Linac) col12 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
2250 6255 m
gs 1 -1 sc (0.2 - 1.5 GeV) col12 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
1590 9420 m
gs 1 -1 sc (Dogbone) col4 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
4965 8970 m
gs 1 -1 sc (FFAG) dup sw pop 2 div neg 0 rm  col1 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
6015 6285 m
gs 1 -1 sc (FFAG) dup sw pop 2 div neg 0 rm  col1 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
6930 3780 m
gs 1 -1 sc (Storage ) col4 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
6840 2610 m
gs 1 -1 sc (beam) col13 sh gr
/Symbol ff 390.00 scf sf
6075 2565 m
gs 1 -1 sc (n) col13 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
2340 7155 m
gs 1 -1 sc (Acceleration) col1 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
4950 6840 m
gs 1 -1 sc (10 - 20 GeV) col1 sh gr
/Helvetica-Bold-iso ff 390.00 scf sf
4140 9360 m
gs 1 -1 sc (5-10 GeV) col1 sh gr
$F2psEnd
rs
end
