C This programs reads elegant ouputs (the optical sequence proper is 
C read from .parms elegant output) and translates to a set of zgoubi input data files.

C If not found in folder ./bendMatch, a bend or quad found in .parms is translated from elegant *AND* 
C matched to elegant [R_ij] matrix *AND* saved in  ./bendMatch. This means that, if a prior run has 
C properly filled up ./bendMatch with all BENDS and QUADS found in .parms sequence, then 
C these individual element matchings won't happen again (that's for the sake of saving time).
C If want to check whether some individual matching is good enough, then go to  ./bendMatch and try 
C something like "grep 'Fit reached penalty value' *FIT.res | grep -i e-04" (e-04 is'nt so god, should be 
C at most e-05, most FITs go down to requested pnlty_indiv, i.e., 1e-12) ; if not happy with some particular bad pnlty,
C then just re-run the individual, in folder ./bendMatch, until happy, and, either update data in corresponding .inc file, 
C or just re-run bmad2z which will re-make the .inc files with updated data values. 

C Once an individual element FIT is either completed or found in ./bendMatch, that element
C is stacked in the corresponding 'segment' file (a '.inc' file) with its data as of the FIT.
 
C These '.inc' files can be run individually. They are organized to allow further individual FIT to elegant 
C twiss functions : just run them. 

C The complete .parms translation is bmad2z.out, which is a series of 'INCLUDE's (of the .inc files).

C23456789012345678901234567890123456789012345678901234567890123456789012
      implicit double precision (a-h,o-z)
      character(80) fnr, matCumul, matIndiv, twiFile
      character txt*132
      character txt590*990,keyword*20,txt20*20,txt40*40
      parameter (mxl=15000)
      dimension iq(mxl)
      character kley*4, name*20
      parameter(mxk=21)
      character kle(mxk)*4, ny*1
      character*35 warn
      logical TOMANY, okV

      logical ok, strcon, idluni
      integer debstr, finstr

      parameter (mxSeg=200)
      character(80) fnwSeg(mxSeg),matchName(mxSeg,2)
      dimension matchLoc(mxSeg,2)
      character(20) lmnta(mxSeg), lmntb(mxSeg)
      logical okAutoRef
      logical gttext

      save pnlty_sgmnt

      dimension alfxm(2),betxm(2),dxm(2),dxpm(2)
      dimension alfym(2),betym(2),dym(2),dypm(2)

      data kle/ 'DRIF', 'RBEN', 'SBEN', 'QUAD', 'SEXT', 'OCTU', 'MULT',
     >'SROT', 'YROT', 'MARK', 'KICK', 'HMON', 'VMON','HKIC', 'VKIC', 
     >'SOLE', 'RCOL', 'MATR', 'MONI', 'RFCA', 'WATC' /
      data okAutoRef / .false. /

      parameter (mxSeg2 = mxSeg*2)
      data matchName / mxSeg2 * 'none' / 

C-- User's data :   ------------------------------------------------------------------------
      pmom = 5978200.4067912307   ! Moment correspondant a fnwSeg(kSeg==1) ci-dessous
      pnlty_indiv = 1.d-12   ! For match of individuel BENDs. This is done on-line. *VERY* imporatnt for zero-ing H and V orbits 
      pnlty_sgmnt = 1.d-10   ! For match of segments (injection, NL, sprE1, etc.). This is not done on-line 
      fnr='bmad2z.in'
      okAutoref = .false.     ! will insert AUTOREF on particle #1 for use with OBJET/KOBJ=5 or 2. 

      kSeg = 1
      fnwSeg(kSeg) = 'inj.inc'
      lmnta(kSeg) = 'IPM0L06'       ! name of first element in the optical sequence fnwSeg(kSeg) - included
      lmntb(kSeg) = 'ISR0R09B'       ! name of last element in the optical sequence fnwSeg(kSeg) - *NOT* included
      matchName(kSeg,1) = 'MBL0R04' ! name of element at exit of which constraints of (possible) re-matching apply

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'linN.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'MXQ1S01'

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'spr_E1.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'MQB1A01'          ! First Arc1 quad - *NOT* included, belongs in next section 
      matchName(kSeg,1) = 'MQB1E01'    ! vertical dispersion. matchName(kSeg,1) doit preceder matchName(kSeg,2)
      matchName(kSeg,2) = 'ARC1MS'     ! alfa, betas. ARC1MS just precedes lmntb(kSeg) = 'MQB1A01'

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'fod_A1.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'IPM1R01'

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'rec_E1.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'MQB2L01'         !  this follows MXQ1R06 
      matchName(kSeg,1) = 'MXQ1R06'       ! alfa, betas
      matchName(kSeg,2) = 'A1E'       ! vertical dispersion

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'linS.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'MXR2S01'

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'spr_W2.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'MQC2A01'
      matchName(kSeg,1) = 'ITV2S05'
      matchName(kSeg,2) = 'ARC2M'

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'fod_A2.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'IPM2R01'

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'rec_W2.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'A2ED'        !  this is the exit of MXR2R06'
      matchName(kSeg,1) = 'IPM2R10A'     ! vertical dispersion
      matchName(kSeg,2) = 'MXR2R06'     ! alfa, betas

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'reInj3.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'ISR0R09B'       !  this is the exit of MBL0R04_3L'

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'linN_2.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'MXQ1S01'

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'spr_E3.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'MQB1A01'          
      matchName(kSeg,1) = 'MQB1E01'   
      matchName(kSeg,2) = 'ARC1MS'    

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'fod_A3.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'IPM1R01'

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'rec_E3.inc'
      lmnta(kSeg) = lmntb(kSeg-1)
      lmntb(kSeg) = 'MQB2L01'         !  this follows MXQ1R06 
      matchName(kSeg,1) = 'MXQ1R06'       ! alfa, betas
      matchName(kSeg,2) = 'A1ED'       ! vertical dispersion

      kSeg = kSeg + 1
      fnwSeg(kSeg) = 'dwSeg.inc'
      lmnta(kSeg) =  lmntb(kSeg-1)
      lmntb(kSeg) = '9999'
      mSeg = kSeg
C-----------------------------------------------------------------------------------------------

      call fitSegPnlty(pnlty_sgmnt)

      am = 0.510998905d0  ! MeV
      etot = sqrt(pmom*pmom + am*am)  ! MeV

      bro = (pmom*1d6) /2.99792458d8    ! T.m 
      write(*,*) ' bro (T.m), p (Mev/c) : ',bro, pmom

      write(*,*) ' bro (T.m), p (Mev/c), am (MeV/c^2), E_tot (MeV) : ',
     >bro, pmom,am, sqrt(pmom**2+am**2),' -  ok ?'
      read(*,*)

Create zgoubi input file with segments as INCLUDEs
      fnwSeg(mxSeg)='bmad2z.out'
      name = lmnta(1)
      iobj = 1
      call getTwi(fnwSeg(kSeg),name,iobj,0,
     >                      alfx0,betx0,dx0,dxp0,
     >                      alfy0,bety0,dy0,dyp0)
      call mkSeqFile(mxSeg,mSeg,fnwSeg,pmom,
     >                      alfx0,betx0,dx0,dxp0,
     >                      alfy0,bety0,dy0,dyp0)
          write(*,*) ' alfx0,betx0,dx0,dxp0 : ',alfx0,betx0,dx0,dxp0
          write(*,*) ' Time to check bmad2z.out if you wish... '
          write(*,*) ' Ok ? '
          read(*,*)
C------------------------------------------------
      write(*,*) 
      write(*,*) ' Fringe field coeff :',
     >             ' lhc/recycler/musr/default (1/2/3/99)'
C 2    read(*,*,err=2) kff
         kff = 99
C      if( kff .ne. 1 .and. kff .ne. 2) kff = 3
      write(*,*) ' Fringe field coeff : option set to ',kff
      call lmntff(kff)

      write(*,*) 
      write(*,*) ' Fringe fields on/off/default (1/0/99) :'
c 3    read(*,*,err=3) frf
          frf  = 0
      if( frf .ne. 1.d0) frf = 0.d0
      if(frf.eq.1.d0) write(*,*) ' Fringe fields on '
      if(frf.eq.0.d0) write(*,*) ' Fringe fields off '

      write(*,*) 
      write(*,*) ' Option KPOS in BEND and MULTIPOLE - ', 
     > 'Option 4 is to change KPOS=3 into the equivalent CHANGREF',
     >                      '1/2/3/4/default (1/2/3/4/99) :'
c 4    read(*,*,err=4) kpos
             kpos = 3
      if( kpos .lt. 1 .or. kpos .gt. 4) kpos=2
      write(*,*) ' Option KPOS set to ',kpos
      xce=0.d0
      yce=0.d0
      ale=0.d0
      if( kpos.eq.2) then
 5      write(*,*) ' Give 3 alignement values xce,yce,ale :'
        read(*,*,err=5) xce,yce,ale
      endif
      call lmnkpo(xce,yce,ale,kpos)

      write(*,*)
      write(*,*) ' Convert DRIFT to zero-field MULTIPOLE (n/y) :'
c 6    read(*,*,err=6) ny
              ny = 'n'
      if(ny.ne.'y') ny='n' 
      write(*,*) '               option set to ',ny
      call lmndri(ny)

      write(*,*)
      write(*,*) 
     >' Translate S/RBEND to BEND / MULTIPOLE / DIPOLE (1/2) :'
c      read(*,*,err=7) kbm 
            kbm = 3
            kbm = 2
 7    continue
      if( kbm .ne. 2 .and. kbm .ne. 3 ) kbm = 1
      if(kbm.eq.1   ) write(*,*) ' BEND will be used for S/RBEND'
      if(kbm.eq.2) write(*,*) ' MULTIPOLE will be used for S/RBEND'
      if(kbm.eq.3) write(*,*) ' DIPOLE will be used for S/RBEND'
      call lmnkbm(kbm)

C      okV = .false. 
      okV = .true. 
      write(*,*) ' Vertical bend :  ',okV
      call lmntV(okV)

C---------------------------------------------------------------

      ok = idluni(
     >            lr)
      OPEN(UNIT=lr,FILE=fnr,status='old',err=97)
      kSeg = 1
      ok = gttext(6,lr,lmnta(kSeg),
     >                             txt)
      backspace(lr)

      bro1 = 1.d0  ! since using 'SCALING'
      write(*,*) 
      write(*,*) ' Now translating. Busy...'

      ok = idluni(
     >            lw)
      OPEN(UNIT=lw,FILE=fnwSeg(kSeg),err=97)

      it = 0
      name = lmnta(kSeg)
      iobj = 1
      call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfx0,betx0,dx0,dxp0,
     >                      alfy0,bety0,dy0,dyp0)
      iop=0   ! will create OPTICS / 0 ALL PRINT
      call objet(lw,it,iop,pmom,am,bro,
     >                      alfx0,betx0,dx0,dxp0,
     >                      alfy0,bety0,dy0,dyp0,
     > fnwSeg(kSeg))

      it = it + 1
      write(lw,fmt='(A,T111,I6)') '''MARKER''   ',it
      write(lw,fmt='(A,T111,I6)') '!! ''GETFITVAL''   '
      write(lw,fmt='(A)') 
     >'!! FITVALS_'//fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))-4)
      write(lw,*) ' '

      it = it + 1
      write(lw,fmt='(A,T111,I6)') '''MARKER''   '//
     >      fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))-4)//'_#S',it
      write(lw,*) ' '

      ir = 0
      noel = 0
      sxl = 0.d0
      s1 = 0.d0
      s = 0.d0
      dKMeV = 0.d0

 86   continue
 
      call read2(lr,     
     >  xl, ang, ak1,ak2,ak3,ak4, tilt, e1,e2, h1,h2,sCntr,
     >  hkic,vkic,volt, phas, freq, chrg, phRef,  
     >  kley,name, hgap, fint, dKMeV, ier)

      if(ier.eq.1) goto 85

c      write(*,*) name(debstr(name):finstr(name)),' --- ',lmntb(kSeg)

C Get optics for segment matching ---------------------------------------
        if    (fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'inj.inc')then
          if(matchName(kSeg,1) .ne. 'none') then
            if(name(debstr(name):finstr(name)).eq.matchName(kSeg,1))then
              iobj = 0
              call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(1),betxm(1),dxm(1),dxpm(1),
     >                      alfym(1),betym(1),dym(1),dypm(1))
            endif
            if(matchName(kSeg,2) .ne. 'none') then
              if(matchName(kSeg,2) .eq. matchName(kSeg,1)) then
                alfxm(2)=alfxm(1);betxm(2)=betxm(1)
                dxm(2)=dxm(1);dxpm(2)=dxpm(1)
                alfym(2)=alfym(1);betym(2)=betym(1)
                dym(2)=dym(1);dypm(2)=dypm(1)
              else
                if(name(debstr(name):finstr(name))
     >          .eq.matchName(kSeg,2))then
                  iobj = 0
                  call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(2),betxm(2),dxm(2),dxpm(2),
     >                      alfym(2),betym(2),dym(2),dypm(2))
                endif
              endif
            endif
C Dispersion functions assumed zero  -------------------
            dxm(1)=0.d0 ; dxpm(1)=0.d0 ; dym(1)=0.d0 ; dypm(1)=0.d0 
            dxm(2)=0.d0 ; dxpm(2)=0.d0 ; dym(2)=0.d0 ; dypm(2)=0.d0 
C-------------------------------------------------------
          endif

        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'spr_E1.inc')then
c          write(*,*) ' spr_E1.inc 1 ', (matchName(kSeg,1) .ne. 'none')
c     >             ,matchName(kSeg,1) 
          if(matchName(kSeg,1) .ne. 'none') then
            if(name(debstr(name):finstr(name)).eq.matchName(kSeg,1))then
              iobj = 0
              call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(1),betxm(1),dxm(1),dxpm(1),
     >                      alfym(1),betym(1),dym(1),dypm(1))
c                 write(*,*) ' spr_E1.inc ',
c     >                      alfxm(1),betxm(1),dxm(1),dxpm(1),
c     >                      alfym(1),betym(1),dym(1),dypm(1)
c                     read(*,*)

            endif

c          write(*,*) ' spr_E1.inc 2 ', (matchName(kSeg,2) .ne. 'none')
c     >             ,matchName(kSeg,2) 

            if(matchName(kSeg,2) .ne. 'none') then
              if(matchName(kSeg,2) .eq. matchName(kSeg,1)) then
                alfxm(2)=alfxm(1);betxm(2)=betxm(1)
                dxm(2)=dxm(1);dxpm(2)=dxpm(1)
                alfym(2)=alfym(1);betym(2)=betym(1)
                dym(2)=dym(1);dypm(2)=dypm(1)
              else
                if(name(debstr(name):finstr(name))
     >          .eq.matchName(kSeg,2))then
                  iobj = 0
                  call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(2),betxm(2),dxm(2),dxpm(2),
     >                      alfym(2),betym(2),dym(2),dypm(2))
c                 write(*,*) ' spr_E1.inc ',
c     >                      alfxm(1),betxm(1),dxm(1),dxpm(1),
c     >                      alfym(1),betym(1),dym(1),dypm(1),
c     >                      alfxm(2),betxm(2),dxm(2),dxpm(2),
c     >                      alfym(2),betym(2),dym(2),dypm(2)
c                     read(*,*)

                endif
              endif
            endif

C Dispersion functions assumed zero  -------------------
            dxm(1)=0.d0 ; dxpm(1)=0.d0 ; dym(1)=0.d0 ; dypm(1)=0.d0 
            dxm(2)=0.d0 ; dxpm(2)=0.d0 ; dym(2)=0.d0 ; dypm(2)=0.d0 
C-------------------------------------------------------
          endif

        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'rec_E1.inc')then
          if(matchName(kSeg,1) .ne. 'none') then
            if(name(debstr(name):finstr(name)).eq.matchName(kSeg,1))then
              iobj = 0
              call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(1),betxm(1),dxm(1),dxpm(1),
     >                      alfym(1),betym(1),dym(1),dypm(1))
            endif
            if(matchName(kSeg,2) .ne. 'none') then
              if(matchName(kSeg,2) .eq. matchName(kSeg,1)) then
                alfxm(2)=alfxm(1);betxm(2)=betxm(1)
                dxm(2)=dxm(1);dxpm(2)=dxpm(1)
                alfym(2)=alfym(1);betym(2)=betym(1)
                dym(2)=dym(1);dypm(2)=dypm(1)
              else
                if(name(debstr(name):finstr(name))
     >          .eq.matchName(kSeg,2))then
                  iobj = 0
                  call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(2),betxm(2),dxm(2),dxpm(2),
     >                      alfym(2),betym(2),dym(2),dypm(2))
                endif
              endif
            endif
C Dispersion functions assumed zero  -------------------
            dxm(1)=0.d0 ; dxpm(1)=0.d0 ; dym(1)=0.d0 ; dypm(1)=0.d0 
            dxm(2)=0.d0 ; dxpm(2)=0.d0 ; dym(2)=0.d0 ; dypm(2)=0.d0 
C-------------------------------------------------------
          endif

        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'spr_W2.inc')then
          if(matchName(kSeg,1) .ne. 'none') then
            if(name(debstr(name):finstr(name)).eq.matchName(kSeg,1))then
              iobj = 0
              call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(1),betxm(1),dxm(1),dxpm(1),
     >                      alfym(1),betym(1),dym(1),dypm(1))
            endif
            if(matchName(kSeg,2) .ne. 'none') then
              if(matchName(kSeg,2) .eq. matchName(kSeg,1)) then
                alfxm(2)=alfxm(1);betxm(2)=betxm(1)
                dxm(2)=dxm(1);dxpm(2)=dxpm(1)
                alfym(2)=alfym(1);betym(2)=betym(1)
                dym(2)=dym(1);dypm(2)=dypm(1)
              else
                if(name(debstr(name):finstr(name))
     >          .eq.matchName(kSeg,2))then
                  iobj = 0
                  call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(2),betxm(2),dxm(2),dxpm(2),
     >                      alfym(2),betym(2),dym(2),dypm(2))
                endif
              endif
            endif
C Dispersion functions assumed zero  -------------------
            dxm(1)=0.d0 ; dxpm(1)=0.d0 ; dym(1)=0.d0 ; dypm(1)=0.d0 
            dxm(2)=0.d0 ; dxpm(2)=0.d0 ; dym(2)=0.d0 ; dypm(2)=0.d0 
C-------------------------------------------------------
          endif

        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'rec_W2.inc')then
          if(matchName(kSeg,1) .ne. 'none') then
            if(name(debstr(name):finstr(name)).eq.matchName(kSeg,1))then
              iobj = 0
              call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(1),betxm(1),dxm(1),dxpm(1),
     >                      alfym(1),betym(1),dym(1),dypm(1))
            endif
            if(matchName(kSeg,2) .ne. 'none') then
              if(matchName(kSeg,2) .eq. matchName(kSeg,1)) then
                alfxm(2)=alfxm(1);betxm(2)=betxm(1)
                dxm(2)=dxm(1);dxpm(2)=dxpm(1)
                alfym(2)=alfym(1);betym(2)=betym(1)
                dym(2)=dym(1);dypm(2)=dypm(1)
              else
                if(name(debstr(name):finstr(name))
     >          .eq.matchName(kSeg,2))then
                  iobj = 0
                  call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(2),betxm(2),dxm(2),dxpm(2),
     >                      alfym(2),betym(2),dym(2),dypm(2))
                endif
              endif
            endif
C Dispersion functions assumed zero  -------------------
            dxm(1)=0.d0 ; dxpm(1)=0.d0 ; dym(1)=0.d0 ; dypm(1)=0.d0 
            dxm(2)=0.d0 ; dxpm(2)=0.d0 ; dym(2)=0.d0 ; dypm(2)=0.d0 
C-------------------------------------------------------
          endif

        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'reInj3.inc')then
          if(matchName(kSeg,1) .ne. 'none') then
            if(name(debstr(name):finstr(name)).eq.matchName(kSeg,1))then
              iobj = 0
              call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(1),betxm(1),dxm(1),dxpm(1),
     >                      alfym(1),betym(1),dym(1),dypm(1))
            endif
            if(matchName(kSeg,2) .ne. 'none') then
              if(matchName(kSeg,2) .eq. matchName(kSeg,1)) then
                alfxm(2)=alfxm(1);betxm(2)=betxm(1)
                dxm(2)=dxm(1);dxpm(2)=dxpm(1)
                alfym(2)=alfym(1);betym(2)=betym(1)
                dym(2)=dym(1);dypm(2)=dypm(1)
              else
                if(name(debstr(name):finstr(name))
     >          .eq.matchName(kSeg,2))then
                  iobj = 0
                  call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(2),betxm(2),dxm(2),dxpm(2),
     >                      alfym(2),betym(2),dym(2),dypm(2))
                endif
              endif
            endif

C Dispersion functions assumed zero  -------------------
            dxm(1)=0.d0 ; dxpm(1)=0.d0 ; dym(1)=0.d0 ; dypm(1)=0.d0 
            dxm(2)=0.d0 ; dxpm(2)=0.d0 ; dym(2)=0.d0 ; dypm(2)=0.d0 
C-------------------------------------------------------
          endif

        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'spr_E3.inc')then
          if(matchName(kSeg,1) .ne. 'none') then
            if(name(debstr(name):finstr(name)).eq.matchName(kSeg,1))then
              iobj = 0
              call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(1),betxm(1),dxm(1),dxpm(1),
     >                      alfym(1),betym(1),dym(1),dypm(1))

            endif

            if(matchName(kSeg,2) .ne. 'none') then
              if(matchName(kSeg,2) .eq. matchName(kSeg,1)) then
                alfxm(2)=alfxm(1);betxm(2)=betxm(1)
                dxm(2)=dxm(1);dxpm(2)=dxpm(1)
                alfym(2)=alfym(1);betym(2)=betym(1)
                dym(2)=dym(1);dypm(2)=dypm(1)
              else
                if(name(debstr(name):finstr(name))
     >          .eq.matchName(kSeg,2))then
                  iobj = 0
                  call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(2),betxm(2),dxm(2),dxpm(2),
     >                      alfym(2),betym(2),dym(2),dypm(2))

                endif
              endif
            endif

C Dispersion functions assumed zero  -------------------
            dxm(1)=0.d0 ; dxpm(1)=0.d0 ; dym(1)=0.d0 ; dypm(1)=0.d0 
            dxm(2)=0.d0 ; dxpm(2)=0.d0 ; dym(2)=0.d0 ; dypm(2)=0.d0 
C-------------------------------------------------------
          endif

        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'rec_E3.inc')then
          if(matchName(kSeg,1) .ne. 'none') then
            if(name(debstr(name):finstr(name)).eq.matchName(kSeg,1))then
              iobj = 0
              call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(1),betxm(1),dxm(1),dxpm(1),
     >                      alfym(1),betym(1),dym(1),dypm(1))
            endif
            if(matchName(kSeg,2) .ne. 'none') then
              if(matchName(kSeg,2) .eq. matchName(kSeg,1)) then
                alfxm(2)=alfxm(1);betxm(2)=betxm(1)
                dxm(2)=dxm(1);dxpm(2)=dxpm(1)
                alfym(2)=alfym(1);betym(2)=betym(1)
                dym(2)=dym(1);dypm(2)=dypm(1)
              else
                if(name(debstr(name):finstr(name))
     >          .eq.matchName(kSeg,2))then
                  iobj = 0
                  call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfxm(2),betxm(2),dxm(2),dxpm(2),
     >                      alfym(2),betym(2),dym(2),dypm(2))
                endif
              endif
            endif
C Dispersion functions assumed zero  -------------------
            dxm(1)=0.d0 ; dxpm(1)=0.d0 ; dym(1)=0.d0 ; dypm(1)=0.d0 
            dxm(2)=0.d0 ; dxpm(2)=0.d0 ; dym(2)=0.d0 ; dypm(2)=0.d0 
C-------------------------------------------------------
          endif

        endif
C---------------------------------------------------------------------

      if(name(debstr(name):finstr(name)) .eq. lmntb(kSeg)) then

        it = it + 1
        write(lw,*) ' '
         write(lw,fmt='(/,A,T111,I6)') '''MARKER''   '//
     >        fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))-4)//'_#E',it
        write(lw,*) ' '

        it = it + 1
        write(lw,fmt='(/,A,T111,I6)') '''OPTIONS''' , it
        write(lw,fmt='(A)') '1  1 '
        write(lw,fmt='(A,/)') 'WRITE ON '
        it = it + 1
        write(lw,fmt='(/,A,T111,I6)') '''DRIFT''' , it
        write(lw,fmt='(A)') '0.'

cC Set FIT in zgoubi file ------------------------------
c        if    (fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'inj.inc')then
c          call setFitInj(lw,name,
c     >    matchName(kSeg,1),matchName(kSeg,2),
c     >    matchLoc(kSeg,1),matchLoc(kSeg,2), fnwSeg(kSeg),
c     >                      alfxm,betxm,dxm,dxpm,
c     >                      alfym,betym,dym,dypm,
c     >                                      it)

c        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'spr_E1.inc')then
c          call setFitSprE1(lw,name,
c     >    matchName(kSeg,1),matchName(kSeg,2),
c     >    matchLoc(kSeg,1),matchLoc(kSeg,2), fnwSeg(kSeg),
c     >                      alfxm,betxm,dxm,dxpm,
c     >                      alfym,betym,dym,dypm,
c     >                                      it)

c        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'rec_E1.inc')then
c          call setFitRecE1(lw,name,
c     >    matchName(kSeg,1),matchName(kSeg,2),
c     >    matchLoc(kSeg,1),matchLoc(kSeg,2), fnwSeg(kSeg),
c     >                      alfxm,betxm,dxm,dxpm,
c     >                      alfym,betym,dym,dypm,
c     >                                      it)

c        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'spr_W2.inc')then
c          call setFitSprW2(lw,name,
c     >            matchName(kSeg,1),matchName(kSeg,2),
c     >    matchLoc(kSeg,1),matchLoc(kSeg,2), fnwSeg(kSeg),
c     >                      alfxm,betxm,dxm,dxpm,
c     >                      alfym,betym,dym,dypm,
c     >                                      it)

c        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'rec_W2.inc')then
c          call setFitRecW2(lw,name,
c     >    matchName(kSeg,1),matchName(kSeg,2),
c     >    matchLoc(kSeg,1),matchLoc(kSeg,2), fnwSeg(kSeg),
c     >                      alfxm,betxm,dxm,dxpm,
c     >                      alfym,betym,dym,dypm,
c     >                                      it)

c        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'spr_E3.inc')then
c          call setFitSprE3(lw,name,
c     >    matchName(kSeg,1),matchName(kSeg,2),
c     >    matchLoc(kSeg,1),matchLoc(kSeg,2), fnwSeg(kSeg),
c     >                      alfxm,betxm,dxm,dxpm,
c     >                      alfym,betym,dym,dypm,
c     >                                      it)

c        elseif(fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))).eq.'rec_E3.inc')then
c          call setFitRecE3(lw,name,
c     >    matchName(kSeg,1),matchName(kSeg,2),
c     >    matchLoc(kSeg,1),matchLoc(kSeg,2), fnwSeg(kSeg),
c     >                      alfxm,betxm,dxm,dxpm,
c     >                      alfym,betym,dym,dypm,
c     >                                      it)

        endif
C------------------------------------------------

        call fileTail(lw,
     >                   it)
        close(lw)

c        write(*,*) ' file done : ', fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg)))

        kSeg = kSeg + 1
        ok = idluni(
     >              lw)
        OPEN(UNIT=lw,FILE=fnwSeg(kSeg),err=97)
        it = 0
        name = lmnta(kSeg)
        iobj = 1
        call getTwi(fnwSeg(kSeg),name,iobj,kSeg,
     >                      alfx0,betx0,dx0,dxp0,
     >                      alfy0,bety0,dy0,dyp0)

C Dispersion functions assumed zero  -------------------
        dx0=0.d0 ; dxp0=0.d0 ; dy0=0.d0 ; dyp0=0.d0 
C-------------------------------------------------------

        iop=0   ! will create OPTICS / 0 ALL PRINT
        call objet(lw,it,iop,
     >  sqrt( (sqrt(pmom*pmom + am*am) + dKMeV)**2 - am*am),
     >  am,
     >  sqrt( (sqrt(pmom*pmom + am*am) + dKMeV)**2 
     >  - am*am)*1.d6/2.99792458d8,  
     >        alfx0,betx0,dx0,dxp0,
     >                      alfy0,bety0,dy0,dyp0,
     > fnwSeg(kSeg))

c       write(88,*) ' kSeg, momentum (MeV/c), Etot (MeV) :',kSeg,
c     >sqrt( (sqrt(pmom*pmom + am*am) + dKMeV)**2 - am*am),
c     >sqrt(pmom*pmom + am*am) + dKMeV, pmom, dKMeV
C               read(*,*)

        it = it + 1
        write(lw,fmt='(A,T111,I6)') '''MARKER''   ',it
        write(lw,fmt='(A,T111,I6)') '!! ''GETFITVAL''   '
        write(lw,fmt='(A)') 
     >  '!! FITVALS_'//fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))-4)
        write(lw,*) ' '

        it = it + 1
         write(lw,fmt='(A,T111,I6)') '''MARKER''   '//
     >        fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))-4)//'_#S',it
        write(lw,*) ' '
      endif

        s = s+xl

        ir = ir + 1

        DO 88 IK=1,MXK
          IF(KLEY .EQ. KLE(IK)) THEN
            NOEL = NOEL+1
            IF( NOEL .EQ. MXL+1) THEN
              TOMANY=.TRUE.
              NOEL=1
            ENDIF
            IQ(NOEL) =  IK
            GOTO 87
          ENDIF
 88     CONTINUE

        WRITE(99,100) KLEY(debstr(kley):finstr(kley))
c        WRITE(*,100) KLEY(debstr(kley):finstr(kley))
C 100    FORMAT(/,10X,' PGM PRINCIPAL : ARRET SUR CLE   ',A,//,128(1H*))
 100    FORMAT(/,10X,' Key      ''',A,'''    not translated... '//
     >  '  Type ''enter'' to continue')

        goto 86 
 
 87     CONTINUE
        it = it + 1
        call lmnt(
     >    lw,bro1,frf,ik,noel,kley,name,xl,ang,ak1,ak2,ak3,ak4,
     >                                            tilt,e1,e2,h1,h2,
     >                                      hkic, vkic,
     >                         volt, phas, freq, hgap, fint,pnlty_indiv, 
     >                          okAutoref,  it, fnwSeg(kSeg))
        if(name .eq. matchName(kSeg,1)) matchLoc(kSeg,1)=it
        if(name .eq. matchName(kSeg,2)) matchLoc(kSeg,2)=it
        ds = s - s1
        s1 = s
        sxl = sxl + xl

      goto 86

 85   continue

      write(lw,*) ' '
       write(lw,fmt='(/,A,T111,I6)') '''MARKER''   '//
     >        fnwSeg(kSeg)(1:finstr(fnwSeg(kSeg))-4)//'_#E',it
      write(lw,*) ' '

        it = it + 1
        write(lw,fmt='(/,A,T111,I6)') '''OPTIONS''' , it
        write(lw,fmt='(A)') '1  1 '
        write(lw,fmt='(A,/)') 'WRITE ON '
        it = it + 1
        write(lw,fmt='(/,A,T111,I6)') '''DRIFT''' , it
        write(lw,fmt='(A)') '0.'

      call fileTail(lw,
     >                 it)
      write(*,*) ' Read ',ir,' elements from bmad2z.in file ',fnr
      write(*,*) ' Translated to',it,
     >' elements into the zgoubi data file ', fnw
      write(*,*) ' end of bmad2z.in file '

      goto 999

 97   write(*,*) ' error open bmad2z.in file'
      goto 999
 99   write(*,*) ' error during read of bmad2z.in file'
      goto 999

 999  continue
      close(lr)
      close(lw)
      close(lw2)
      stop
      end
        
      subroutine objet(lw,it,iop,pmom,am,bro, 
     >                      alfx0,betx0,dx0,dxp0,
     >                      alfy0,bety0,dy0,dyp0,
     > fnwSeg)
      implicit double precision (a-h,o-z)
      character(*) fnwSeg
      integer debstr, finstr

C      G = 1.79284735d0
      G =  1.15965218076e-3

 1    continue

      gamma = sqrt(pmom*pmom + am*am)/am
c      write(*,*) ' Problem rigidity (T.m), momentum (MeV/c), G.gamma : '
c     > ,  bro,pmom,G*gamma, ' lw = ',lw

      write(lw,*) fnwSeg(debstr(fnwSeg):finstr(fnwSeg))//
     >'. Generated using elegant -> Zgoubi translator.'

      it = it + 1
      write(lw,fmt='(A,T111,I6)') '''OBJET''',it
      write(lw,FMT='(2p,e15.9,7x,0p,2(2x,A,f14.8))') bro*1.d3,
     >'reference momentum (MeV/c) = ',pmom, 
     >',  G.gamma = ',G*gamma
      write(lw,fmt='(A)') '5.01' 
      write(lw,fmt='(A)') '.001 .001 .001 .001 0. .0001  '
      write(lw,fmt='(A)') '0. 0. 0. 0. 0. 1. '
c      write(lw,fmt='(A,f14.8)') '0. 0. 0. 0. 0. ',pcntrl/pmom
c      write(lw,fmt='(A)') '-0.5359459 2.9979264 -0.3680774 '//
c     >' 2.744088 0. 1. 0. 0. 0. 0. '
c      write(lw,fmt='(A)') '-3.3416920 15.95832  1.22482846882 '//
c     >' 8.1431159046 0. 1. -1.4390249494e-02   9.62885e-02 0. 0.'
      write(lw,fmt='(1p,4(e11.4,1x),A,4(e11.4,1x))') 
     >                      alfx0,betx0,alfy0,bety0,'0. 1. ',
     >                      dx0,dxp0,dy0,dyp0      

      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''PARTICUL''',it
      write(lw,FMT='(1p,e14.8,A,e17.11,A)') 
     >am, ' 1.60217653e-19 ',G,' 0. 0.' 

      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''OPTICS''',it
      write(lw,fmt='(A)') '1 ALL PRINT'

      it = it + 1
      write(lw,fmt='(A,T111,I6)') '''SPNTRK''',it
      write(lw,FMT='(A)') ' 1 '

C      it = it + 1
C      write(lw,fmt='(A,T111,I6)') '''FAISCEAU''',it
      it = it + 1
      write(lw,fmt='(A,T111,I6)') '''FAISTORE''',it
      write(lw,FMT='(A)') ' zgoubi.fai   none '
      write(lw,FMT='(A)') ' 1'

      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''SRLOSS''',it
      write(lw,FMT='(A)') ' 0   srLoss'
      write(lw,FMT='(A)') ' MULTIPOL'
      write(lw,FMT='(A)') ' 1 123456'

      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''ERRORS''',it
      write(lw,FMT='(A)') ' 0 1 123466                   dB(kG)'
      write(lw,FMT='(A)') ' MULTIPOL{}  1  BP A U 0.d0   0.0  9999'

      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''SCALING''' , it
      write(lw,fmt='(A)') '1  4 '
      write(lw,fmt='(A)') 'DIPOLE '
      write(lw,fmt='(A)') '-1   '
      write(lw,fmt='(2P,E16.8)') BRO
      write(lw,fmt='(A)') '1      '
      write(lw,fmt='(A)') 'MULTIPOL '
      write(lw,fmt='(A)') '-1         '
      write(lw,fmt='(2P,E16.8)') BRO
      write(lw,fmt='(A)') '1      '
      write(lw,fmt='(A)') 'MULTIPOL  MQS1L*  MQD1L*  MQB1L* MQN1L*'
      write(lw,fmt='(A)') '2         '
      write(lw,fmt='(A)') '1.    1.         '
      write(lw,fmt='(A)') '1     9999 '
      write(lw,fmt='(A)') 'MULTIPOL  MQS2L*  MQB2L*  MQL2L*'
      write(lw,fmt='(A)') '2         '
      write(lw,fmt='(A)') '1.    1.         '
      write(lw,fmt='(A)') '1     9999 '

      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''OPTIONS''' , it
      write(lw,fmt='(A)') '1  1 '
C      write(lw,fmt='(A,/)') 'WRITE ON '
      write(lw,fmt='(A,/)') 'WRITE OFF '

      return
      end 

      subroutine lmnt(
     >lw,bro,frf,ik,noel,kley,name,xl,ang,ak1,ak2,ak3,ak4,
     >                                        tilt,e1,e2,h1,h2,
     >                                      hkic, vkic,
     >               volt, phas, freq, hgap, fint,pnlty,
     >                       okAutoref,     it,fnwSeg)
c      subroutine lmnt
c     >(lw,bro,frf,ik,noel,kley,name,xl,ang,ak1,ak2,tilt,e1,e2,h1,h2,
c     >                                                       it)
      implicit double precision (a-h,o-z)
      character(*) kley, fnwSeg
      logical  okAutoref
      character(*) name
      character ny*1

      character*80 txfd, txfq,fqlhc , fdlhc ,fqrec , fdrec,fd,fq
      character*80 txffd,txffq,ffqlhc,ffdlhc,ffqrec,ffdrec,ffd,ffq
      character*80 ffdmu, fdmu, ffqmua,ffqmus,fqmua
      save txfd,txfq,txffd, txffq
      logical drimul
      save drimul
      character(4) txt4
      character(10) lbl2

      data ffq / '6.00  3.00 1.00 0.00 0.00 0.00 0.00 0. 0. 0. 0. ' / 
      data fq / '6  .1122 6.2671 -1.4982 3.5882 -2.1209 1.723'/
      data ffd / '10.00  4.0  0.800 0.00 0.00 0.00 0.00 0. 0. 0. 0. ' / 
      data fd /'4  .1455   2.2670  -.6395  1.1558  0. 0.  0.'/ 

!----------- Recycler fringe fields -----------------------------------------
!  quadrupole
      data ffdrec / '8.00  5.0  1.000 1.00 0.00 0.00 0.00 0. 0. 0. 0. '/ 
      data fdrec /'4  0.09650  3.76444 -0.70378  1.31734  0. 0. 0.' / 
!  dipole
      data ffqrec / '6.00  3.00 1.00 0.00 0.00 0.00 0.00 0. 0. 0. 0. ' / 
      data fqrec / '6  .1122 6.2671 -1.4982 3.5882 -2.1209 1.723' / 

!----------- LHC fringe fields -----------------------------------------
!  dipole White book
      data ffdlhc /'15.00 11.20  0.00 0.00 0.00 0.00 0.00 0. 0. 0. 0.' / 
      data fdlhc 
     >/'6 .015527 3.874961 -2.362230 2.978209 12.604429 15.025689' /
!  quadrupole Saclay
      data ffqlhc / '8.0 5.60  1.00 0.00 0.00 0.00 0.00 0. 0. 0. 0. ' / 
      data fqlhc 
     >/'6 -.010967  5.464823  .996848 1.568787 -5.671630 18.505734' /
!----------- LHC fringe fields -----------------------------------------

!----------- muon collider fringe fields -------------------------------
!  dipoles
      data ffdmu /'15.00 11.20  0.00 0.00 0.00 0.00 0.00 0. 0. 0. 0.' / 
      data fdmu 
     >/'6 .015527 3.874961 -2.362230 2.978209 12.604429 15.025689' /
!  arc quadrupoles (length=0.5, radius=31mm)
      data ffqmua / '9.0 9.0  1.00 0.00 0.00 0.00 0.00 0. 0. 0. 0.' / 
      data fqmua 
     >/'6  .1122 6.2671 -1.4982 3.5882 -2.1209 1.723  arc' /
!  LSS and matching cell quadrupoles (length=0.35, radius=89mm)
      data ffqmus / '17.0 20.0  1.00 0.00 0.00 0.00 0.00 0. 0. 0. 0.' / 
!----------- muon collider fringe fields -------------------------------

      parameter (cm=100.d0, t2kg=10.d0)
      parameter(i0=0, i1=1, i2=2, i4=4, i6=6)
      parameter(x0=0.d0,x1=1.d0,x2=2.d0,x3=3.d0,x4=4.d0,x5=5.d0,x6=6.d0)
      parameter(x7=7.d0,x8=8.d0,x10=10.d0,x20=20.d0,x999=999.d0)

      character txt*80, txtfrm*23
      save kpos, kbm

      logical okV, okVi, Vbnd
      save okV
      integer debstr, finstr
      logical match
      save match
      character(35) fitxt(50)
      character(6) txt6
      character(2) txt2
      logical ok, idluni
      character(100) cmmnd
      dimension var(50)
      logical gttext

      data match / .true. /

      pi = 4.d0*atan(1.d0)
      zero=0.d0
      txtfrm = '(A,T12,A,2X,A,T111,i6)'

C----- 1    2    3    4    5    6    7    8    9    10   11   12   13
C----- DRIF RBEN SBEN QUAD SEXT OCTU MULT SROT YROT MARK KICK HMON VMON
C----- 14   15   16   17   18   12   19   20
C----- HKIC VKIC SOLE RCOL MATR MONI RFCA WATC
       goto (
     > 1,   2 ,  2 ,  4,   5,   6,   7,   8,   9,   10,  11,  12,  12,
     > 11,  11,  13,  1,  18,   12,   19, 10) ik

 1    continue
C----- DRIF      
      if(xl .eq. 0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm)'''MARKER''',name,' '//lbl2,it
        goto 99
      else
        if(drimul) then
          dum=1.d-20
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
          write(lw,fmt=txtfrm) '''MULTIPOL''',name,' '//lbl2,it
          write(lw,fmt='(I1,A)') i0,'  .Drift'
          write(lw,fmt='(G12.6,G8.2,G16.10,9G7.1)')
     >    xl*cm,x10,x0,dum,x0,x0,x0,x0,x0,x0,x0,x0
          txt = '0. 0. '//txffq
          write(lw,fmt='(A)') txt
          write(lw,fmt='(A)') txfq
          write(lw,fmt='(A)') txt
          write(lw,fmt='(A)') txfq
          write(lw,fmt='(A)') ' 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.'
          write(lw,fmt='(A)') nint(xl*cm), '  Drift'
          write(lw,fmt='(A)') '1 0. 0. 0.'
        else
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
          write(lw,fmt=txtfrm) '''DRIFT''',name,' '//lbl2,it
          write(lw,fmt='(F23.15)') xl*cm
        endif
      endif
      goto 99

 2    continue
       if    (kbm.eq.1) then
C-------- Translate R- or SBEND to BEND
         if(ik.eq.2) then
C---------- RBEN -> BEND
           goto 21
         elseif(ik.eq.3) then
C---------- SBEN -> BEND
           goto 3
         endif
       elseif(kbm.eq.2) then
C----- R- or SBEN -> MULTIPOL
         if(xl .eq. 0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
           write(lw,fmt=txtfrm) '''MARKER''',name,' '//lbl2,it
           goto 99
         endif

         if(name .eq. 'MXQ1S01') goto 31   !  -> DIPOLE

       elseif(kbm.eq.3) then
C----- R- or SBEN -> DIPOLE
         if(xl .eq. 0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
           write(lw,fmt=txtfrm) '''MARKER''',name,' '//lbl2,it
           goto 99
         endif
         goto 31
       endif

          xce = 0.d0
          yce = 0.d0
          ale = 0.d0
          alea = 0.d0
          aleb = 0.d0

          frf = 0.
C           if(fint*hgap .ne.0.d0) frf =1.          

      if(ik.eq.2) then
C case RBEN
        xlarc = xl/(2.d0*sin(ang/2.d0)) * ang
      elseif(ik.eq.3) then
C case SBEN
        xlarc = xl
      else
        stop ' sbr lmnt, no such option ik '
      endif

      off = 0.d0
      facf = .6700000

      if(ang.ne.0.d0) then
C Ang .ne. 0

        ro = xlarc /ang
        xlmag = 2.d0 * ro * sin (ang/2.d0)
        b1 = bro / ro                              ! dipole field (T)

        if(abs(e1)+abs(e2) .gt. 1.d-6) then
C     e1 or e2 non-zero

          if(  abs(e1 - ang) .lt. 1e-6 ) then
C e1=ang, e2=0
            kpos =1
            xce=0.d0
            ycea= 0.
            yceb= abs( ro*(1.d0-cos(ang))) * cm 
            off = yceb * .6700000 /cm ! chck sign vs. sign(k1)
            off = yceb * facf /cm 
            if(ak1.lt.0.d0) off = -off
C               off=0.
c                 write(*,*) ' yceb =',yceb
c                      stop
            xlmag = ro * sin (ang)
            alea = -abs(e1)
            aleb = 0.

          elseif(  abs(e2 - ang) .lt. 1e-6 ) then
C e1=0, e2=ang
            kpos =1
            xce=0.d0
            ycea= - abs(ro*(1.d0-cos(ang))) * cm 
            yceb= 0. 
            off = ycea * 0.67000000 /cm ! empirical, for k1>0.  Chck sign vs. sign(k1)
            off = ycea * facf /cm 
C            if(ak1.lt.0.d0) off = -off
            if(ak1.gt.0.d0 .and. b1.lt.0.d0) off = -off
            xlmag = ro * sin (ang)
            alea = 0.
            aleb = -abs(e2)

          else
C e1 = e2
            kpos = 3
            xce=0.d0
            yce=0.d0
            yce=  ro*(1.d0-cos(ang/2)) * cm
            off = yce *.67000000 /cm 
            off = yce *facf /cm 
            off = abs(off)
            if(b1.gt.0. ) off = -off
            yce = 0.
C               off=0.
            ak1 = -ak1
            if(b1<0.d0) then 
C Case of MXJ1S03 
              ale = ang/2.d0
            else
              ale = -ang/2.d0
            endif
          endif

        else
          if(kpos.eq.4) then
            ale = -0.5d0 * ang * 180/pi
            yce = ro*(1-cos(ale*pi/180)) * cm
          else
            kpos = 3
            xce=0.d0
            yce=0.d0
            yce=  ro*(1.d0-cos(ang/2)) * cm
            off = yce *.67000000 /cm 
            off = yce *facf /cm 
            off = abs(off)
            if(b1.gt.0. ) off = -off
            yce = 0.
C               off=0.
            ak1 = -ak1
            if(b1<0.d0) then 
C Case of MXJ1S03 
              ale = ang/2.d0
            else
              ale = -ang/2.d0
            endif
          endif
        endif

      else
C Ang = 0
        xlmag=xl
        b1=0.d0
          ale=0.d0
          xce=0.d0
          yce=0.d0
      endif

c             write(*,*) ' 2 ',name, ang, b1, kpos

      Vbnd = okV .and. abs(tilt).gt.1d-6

! Takes care of the offset due to grad in combined fcntn magnets
      if( ak1 .ne. 0.d0) then
        sqrk = sqrt(abs(ak1))
        sqrkl = sqrk * xlarc
        if(ak1 .ge. 0.d0 ) then
          si = sin(sqrkl)
          co = cos(sqrkl)
        else
          si = sinh(sqrkl)
          co = cosh(sqrkl)
        endif

          b1mod = b1 + ak1 * off * Bro    ! Tesla

c             write(*,*) ' b1mod ',b1,b1mod


      endif
! quadrupole field at .1 m (T)
      b2 = ak1*bro * x10/100.                     
! sextupole field at .1 m (T)
      b3 = ak2 * bro *(x10/100.)**2 / 2.d0
C         write(*,*) ak2, bro, b3, x10

      if(abs(tilt).gt.1d-6) then
        if(.not. Vbnd) then
c          b1mod = 0.d0
          b2 = 0.d0
          b3 = 0.d0          
        endif
      endif
      
      absb1 = abs(b1)

      xes = 2.5 * gap

      YCE3 = 0.d0
      bdip =  absb1*10.d0
      dipk = b2*10.d0

      if(hgap .ne. 0.d0) then
        gap = 2.*hgap
        if (gap .lt. 0.08) gap = 0.08
        if(3.*gap .gt. xlmag/2.) then
          gap = xlmag/2.1 /3.
        endif 
      endif
      FFdp = gap*cm

      if(match) then

        call system('mkdir -p ./bendMatch/')
        ok = idluni(lunW)
        open(unit=lunW,file=
     >  './bendMatch/'//name(debstr(name):finstr(name))//'_FIT.dat')
        write(lunw,*) 'Generated using elegant -> Zgoubi translator'
        write(lunw,fmt='(A,T111,I6)') '''OBJET'''
        write(lunw,FMT='(a)') ' 1000. '
        write(lunw,fmt='(A)') '5' 
        write(lunw,fmt='(A)') '.01 .01 .01 .01 0. .001  '
        write(lunw,fmt='(A)') '0. 0. 0. 0. 0. 1. '
        nuel = 1
        nv = 0

        if(Vbnd) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
          write(lunw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
          write(lunw,fmt='(a,1p,e16.8,a)') '0. 0. 0. ',tilt,' 0. 0.'
          nuel = nuel + 1
        endif

        if(b1<0.d0) then
          write(lunw,fmt=txtfrm) '''YMY''','YMY_IN ','NEG_B',it
          nuel = nuel + 1
        endif

        if    (kpos.eq.1) then
          write(lunw,fmt=txtfrm) '''CHANGREF''',' ',' ',it
          write(lunw,fmt='(1p,2(1x,A,e14.6))') 
     >           'YS ',ycea,'ZR ',alea/pi*180.d0
          nuel = nuel + 1
          if(ycea.ne.0.) then
            nv = nv + 1
            write(txt6,fmt='(i0)') nuel
            write(txt2,fmt='(i0)') nv
            fitxt(nv) = txt6//' 1  0  .5      ! var#'//txt2//' ycea'
          endif
        endif

        if(b1<0.d0) then
          write(lunw,*) '''MULTIPOL'''//' '//name//' '//' NEG_B'
        else
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
            write(lunw,fmt=txtfrm) '''MULTIPOL''',name,' '//lbl2,it
        endif

c        write(*,fmt=txtfrm) ' '
c        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
c        write(*,fmt=txtfrm) '''MULTIPOL''',name,' '//lbl2,it
        write(lunw,fmt='(I1,A)') i0,'  .Dip'

! Takes care of the offset due to grad in combined fcntn magnets
        if( ak1 .ne. 0.d0) then
          sqrk = sqrt(abs(ak1))
          sqrkl = sqrk * xlarc
          if(ak1 .ge. 0.d0 ) then
            si = sin(sqrkl)
            co = cos(sqrkl)
          else
            si = sinh(sqrkl)
            co = cosh(sqrkl)
          endif

          b1mod = b1 + ak1 * off * Bro    ! Tesla
c             write(*,*) '  2 b1mod ',b1,b1mod

        else
          b1mod = b1
        endif
! quadrupole field at .1 m (T)
        b2 = ak1*bro * x10/100.                     
! sextupole field at .1 m (T)
        b3 = ak2 * bro *(x10/100.)**2 / 2.d0

        if(abs(tilt).gt.1d-6) then
         if(.not. Vbnd) then
          b1mod = 0.d0
          b2 = 0.d0
          b3 = 0.d0          
         endif
        endif
      
        absb1 = abs(b1mod)
c             write(*,*) ' 3  b1mod ',b1,b1mod

        write(lunw,fmt='(F11.6,F7.2,3F13.8,7F4.1)')
     >  xlmag*cm, x10, absb1*10.d0, b2*10.d0, 
     >  b3*10.d0, x0,x0,x0,x0,x0,x0,x0

        nuel = nuel + 1
        nv = nv + 1
        write(txt6,fmt='(i0)') nuel
        write(txt2,fmt='(i0)') nv
        if(b1.ne. 0.d0) then
          fitxt(nv) = txt6//' 4  0  .5      ! var#'//txt2//' bdip'
c             write(*,*) ' b1, fitxt : ',b1mod,fitxt(nv),nv
        else
          fitxt(nv) = txt6//' 4 0 [-1.,1.]  ! var#'//txt2//' bdip'
c               write(*,*) ' b1, fitxt : ',b1mod,fitxt(nv),nv
        endif

c             write(*,*) name, b1,fitxt(nv)

        nv = nv + 1
        write(txt6,fmt='(i0)') nuel
        write(txt2,fmt='(i0)') nv
        if(b2.ne. 0.d0) then
          fitxt(nv) = txt6//' 5 0 [-3.,3.]  ! var#'//txt2//' kdip'
c               write(*,*) ' b2, fitxt : ',b2,fitxt(nv),nv
        else
          fitxt(nv) = txt6//' 5 0 [-3.,3.]  ! var#'//txt2//' kdip'
c               write(*,*) ' b2, fitxt : ',b2,fitxt(nv),nv
        endif
CCCCCCCCCCCCCCCCCCCCCCc      endif

        if(hgap .ne. 0.d0) then
          gap = 2.*hgap
          if (gap .lt. 0.08) gap = 0.08
          if(3.*gap .gt. xlmag/2.) then
            gap = xlmag/2.1 /3.
          endif 
            nv = nv+1
            write(txt6,fmt='(i0)') nuel
            write(txt2,fmt='(i0)') nv
            fitxt(nv) = txt6//' 15 '//txt6(debstr(txt6):finstr(txt6))
     >          //'.033 .2 ! var#'//txt2//' FFdp'
        endif
      xes = 2.5 * gap
      write(txt,fmt='(f6.2,1x,f6.2)') xes*cm,gap*cm
      txt = txt(debstr(txt):finstr(txt))//
     >' 1.00 0.00 0.00 0.00 0.00 0. 0. 0. 0.'
         write(lunw,fmt='(A)') txt(debstr(txt):finstr(txt))
          write(lunw,fmt='(A)') txfd
           write(lunw,fmt='(A)') txt(debstr(txt):finstr(txt))
     >//' '//name//' FFout'
          write(lunw,fmt='(A)') txfd
         write(lunw,fmt='(a)') ' 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.'
      if(xlmag*cm-int(xlmag*cm).gt.0.5) then 
            istepdip=int(xlmag*cm)+1
      else
            istepdip=int(xlmag*cm)
      endif

        write(lunw,fmt='(A,I0,A)') ' #30|',istepdip,'|30    Dip '//name

c             write(*,*) ' 2 ',name, ang, b1, kpos

      if(kpos .eq. 1) then
                write(lunw,*)  ' 1 0. 0. 0. '
      elseif(kpos.ne.4) then
        if(abs(tilt).gt.1d-6) then
c             write(lunw,*)  ' 1 0. 0. 0. '
             write(lunw,*)  kpos,xce,yce,ale
        else
               write(lunw,*)  kpos,xce,yce,ale
        endif
        if(kpos.eq.3) then
              nv = nv+1
              write(txt6,fmt='(i0)') nuel
              write(txt2,fmt='(i0)') nv
              fitxt(nv) = txt6//' 65 0 [-3.,3]  ! var#'//txt2//' YCE3'
        endif
      else
C             write(lunw,*)  1,0.d0,0.d0,0.d0
             write(lunw,*)  kpos,xce,yce,ale
      endif

c             write(*,*) ' 3 ',name, ang, b1, kpos

      if    (kpos.eq.1) then
            write(lunw,fmt=txtfrm) '''CHANGREF''',' ',' ',it
              write(lunw,fmt='(1p,2(A,e14.6))') 
     >              ' YS ',yceb,' ZR ',aleb/pi*180.d0
          nuel = nuel + 1
          if(yceb.ne.0.) then
            nv = nv+1
            write(txt6,fmt='(i0)') nuel
            write(txt2,fmt='(i0)') nv
            fitxt(nv) = txt6//' 1  0  .5      ! var#'//txt2//' yceb'
          endif
      endif

      if(b1<0.d0) then
             write(lunw,fmt=txtfrm) '''YMY''','YMY_OUT',' ',it
       endif
      
      if(Vbnd) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
             write(lunw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
              write(lunw,fmt='(a,1p,e16.8,a)') 
     >           '0. 0. 0. ',-tilt,' 0. 0.'
      endif

        write(lunw,FMT='(A)') '''MATRIX'''
        write(lunw,FMT='(A)') ' 1 0 '
        write(lunw,fmt='(A)') '''FIT2'' '
        write(lunw,FMT='(i0,a)') nv , '    noSYSout save'
        do i = 1, nv
          write(lunW,*) fitxt(i)
        enddo

        if(len(name(debstr(name):finstr(name))).gt.1)
     >   call getRijInd(name(debstr(name):finstr(name)),
     >                   r11,r12,r33,r34)
        nc = 8
        write(lunw,FMT='(i0,1x,1p,e10.2)') nc,pnlty
        write(lunw,FMT='(a,1p,e12.4,a)') '1 1 1 #End ',R11,' 1. 0'
        write(lunw,FMT='(a,1p,e12.4,a)') '1 1 2 #End ',R12,' 1. 0'
        write(lunw,FMT='(a,1p,e12.4,a)') '1 3 3 #End ',R33,' 1. 0'
        write(lunw,FMT='(a,1p,e12.4,a)') '1 3 4 #End ',R34,' 1. 0'
        write(lunw,FMT='(a)') '3 1 2 #End 0. 1. 0'
        write(lunw,FMT='(a)') '3 1 3 #End 0. 1. 0'
        write(lunw,FMT='(a)') '3 1 4 #End 0. 1. 0'
        write(lunw,FMT='(a)') '3 1 5 #End 0. 1. 0'
        write(lunw,FMT='(A)') '''MATRIX'''
        write(lunw,FMT='(A)') ' 1 0 '
        write(lunw,FMT='(A)') '''END'''
        close(lunW)

        cmmnd = '(cd ./bendMatch ; \cp '//
     >  name(debstr(name):finstr(name))//'_FIT.dat zgoubi.dat ; '
     >//'  ~/zgoubi/current/zgoubi/zgoubi )'
        call system(cmmnd)
        cmmnd = '(cd ./bendMatch ; \cp zgoubi.FITVALS.out '//
     >  name(debstr(name):finstr(name))//'_zgoubi.FITVALS.out )'
        call system(cmmnd)
        cmmnd = '(cd ./bendMatch ; mv -f zgoubi.res '//
     >  name(debstr(name):finstr(name))//'_FIT.res )'
        call system(cmmnd)

C Now get new parameter values as of FIT
        ok = idluni(
     >              lrfit)
        open(unit=lrfit,file='./bendMatch'//'/'//
     >  name(debstr(name):finstr(name))//'_zgoubi.FITVALS.out')
        ok = gttext(6,lrfit,'STATUS OF V',
     >                               txt)
        read(lrfit,*) txt
c        write(*,*) ' gttext  ',txt
c              read(*,*)        
     
        read(lrfit,fmt='(a)',end=444,err=444) txt
c        write(*,*) ' variables  ',txt
c        write(*,*) ' variables  ',txt
c        write(*,*) ' variables  ',txt
        do while (txt(debstr(txt):debstr(txt)+5) .ne. 'STATUS')
c          write(*,*) ' variables  ',txt(debstr(txt):debstr(txt)+5)
          read(txt,*) nlm,nvar,mpar,dum,dum,var(nvar)
c          write(*,*) ' '
c          write(*,*) ' variable value : ', nlm,nvar,mpar,var(nvar)
          read(lrfit,fmt='(a)',end=444,err=444) txt
c          write(*,*) ' variables loop ',txt
c          read(*,*)
        enddo
 444    continue
        close(lrfit)

        do i = 1, nv
           txt4=fitxt(i)(finstr(fitxt(i))-3:finstr(fitxt(i)))
           if(txt4 .eq. 'ycea') ycea=var(i)   
           if(txt4 .eq. 'bdip') bdip=var(i)
           if(txt4 .eq. 'kdip') dipk=var(i)
           if(txt4 .eq. 'FFdp') FFdp=var(i)
           if(txt4 .eq. 'YCE3') YCE3=var(i)   
           if(txt4 .eq. 'yceb') yceb=var(i)   
c            write(*,*) fitxt(i)(finstr(fitxt(i))-3:finstr(fitxt(i)))
c                 write(*,*) ' i, var ', i,var(i) ,name,txt4
c                 write(*,*) ycea,bdip,dipk,FFdp,YCE3,yceb,txt4
        enddo

C                  read(*,*)
C-------------------------------------------------
CCCCCCCCCCCCCCCCCCCCCCc      
      endif ! match

      if(Vbnd) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
        write(lw,fmt='(a,1p,e16.8,a)') '0. 0. 0. ',tilt,' 0. 0.'
          it = it+1
      endif

      if(b1<0.d0) then
        write(lw,fmt=txtfrm) '''YMY''','YMY_IN ','NEG_B',it
          it = it+1
      endif

      if    (kpos.eq.1) then
        write(lw,fmt=txtfrm) '''CHANGREF''',' ',' ',it
        write(lw,fmt='(1p,2(1x,A,e14.6))') 
     >           'YS ',ycea,'ZR ',alea/pi*180.d0
          it = it+1
      endif

      if(b1<0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''MULTIPOL''',name,' '//lbl2//' NEG_B',it
      else
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''MULTIPOL''',name,' '//lbl2,it
      endif

      write(lw,fmt='(I1,A)') i0,'  .Dip'

! Takes care of the offset due to grad in combined fcntn magnets
      if( ak1 .ne. 0.d0) then
        sqrk = sqrt(abs(ak1))
        sqrkl = sqrk * xlarc
        if(ak1 .ge. 0.d0 ) then
          si = sin(sqrkl)
          co = cos(sqrkl)
        else
          si = sinh(sqrkl)
          co = cosh(sqrkl)
        endif

      endif
! quadrupole field at .1 m (T)
      b2 = ak1*bro * x10/100.                     
! sextupole field at .1 m (T)
      b3 = ak2 * bro *(x10/100.)**2 / 2.d0

      if(abs(tilt).gt.1d-6) then
        if(.not. Vbnd) then
          b2 = 0.d0
          b3 = 0.d0          
        endif
      endif
      
      write(lw,fmt='(F11.6,F7.2,3F13.8,7F4.1)')
     >xlmag*cm, x10, bdip, dipk, 
     >b3*10.d0, x0,x0,x0,x0,x0,x0,x0
      xes = 2.5 * gap
C      write(txt,fmt='(f6.2,1x,f6.2)') xes*cm,gap*cm
      write(txt,fmt='(f6.2,1x,f8.4)') xes*cm,FFdp
      txt = txt(debstr(txt):finstr(txt))//
     >' 1.00 0.00 0.00 0.00 0.00 0. 0. 0. 0.'
      write(lw,fmt='(A)') txt(debstr(txt):finstr(txt))
     >//' '//name//' FFin'
      write(lw,fmt='(A)') txfd
      write(lw,fmt='(A)') txt(debstr(txt):finstr(txt))
     >//' '//name//' FFout'
      write(lw,fmt='(A)') txfd
      write(lw,fmt='(a)') ' 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.'
      if(xlmag*cm-int(xlmag*cm).gt.0.5) then 
            istepdip=int(xlmag*cm)+1
      else
            istepdip=int(xlmag*cm)
      endif

      write(lw,fmt='(A,I0,A)') ' #30|',istepdip,'|30    Dip '//name

      if(kpos .eq. 1) then
                write(lw,*)  ' 1 0. 0. 0. '
      elseif(kpos.ne.4) then
        if(abs(tilt).gt.1d-6) then
             write(lw,*)  kpos,xce,YCE3,ale
c             write(lw,*)  ' 1 0. 0. 0. '
        else
               write(lw,*)  kpos,xce,YCE3,ale
        endif
      else
c             write(lw,*)  1,0.d0,0.d0,0.d0
               write(lw,*)  kpos,xce,yce,ale
      endif

      if    (kpos.eq.1) then
          it = it+1
        write(lw,fmt=txtfrm) '''CHANGREF''',' ',' ',it
        write(lw,fmt='(1p,2(A,e14.6))') 
     >              ' YS ',yceb,' ZR ',aleb/pi*180.d0
      endif

      if(b1<0.d0) then
        it = it + 1
        write(lw,fmt=txtfrm) '''YMY''','YMY_OUT',' ',it
       endif
      
      if(Vbnd) then
        it = it+1
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
        write(lw,fmt='(a,1p,e16.8,a)') '0. 0. 0. ',-tilt,' 0. 0.'
      endif

      goto 99
 
 21   continue
C----- RBEN -> BEND
      if(xl * ang .eq. 0.d0) then
        if(xl .eq. 0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
          write(lw,fmt=txtfrm) '''MARKER''',name,' '//lbl2,it
        else
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
          write(lw,fmt=txtfrm) '''DRIFT''',name,' '//lbl2,it
          write(lw,fmt='(1P,E14.6)') xl*cm
        endif
        goto 99
      endif

      Vbnd = okV .and. abs(tilt).gt.1d-6
      if(Vbnd) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
        it = it+1
        write(lw,fmt='(a,1p,e16.8,a)') '0. 0. 0. ',tilt,' 0. 0.'
      endif

        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''BEND''',name,' '//lbl2,it
      write(lw,fmt='(I1,A)') i0,'  .Bend'
      ro=xl/2./sin(ang/2.)
      b=ang * bro / xl *10.  !bro/ro*t2kg
C      xxl=ro*ang*cm
      ro=ro*cm

C err. FM June 2009      write(lw,fmt='(2F14.7,F15.8)') xl,tilt,b 
      write(lw,fmt='(2F16.9,F15.8)') xl*cm,tilt,b 
      te=ang/2.+e1
      if(frf .eq. 0.) then
        write(lw,fmt='(2F6.2,2(1x,F12.8))') x0,x0,te
      else 
        write(lw,fmt='(2F6.2,2(1x,F12.8))') x20,x8,te
      endif
      write(lw,fmt='(A)') txfd
      ts=ang/2.+e2
      if(frf .eq. 0.) then
        write(lw,fmt='(2F6.2,2(1x,F12.8))') x0,x0,ts
      else
        write(lw,fmt='(2F6.2,2(1x,F12.8))') x20,x8,ts
      endif
      write(lw,fmt='(A)') txfd
      step = xl
      write(lw,fmt='(1P,E12.4,A)') dble(nint(step)),'  Bend'
C      write(lw,fmt='(F12.6,A4)') step * 10.,'  Bend'
C      write(lw,fmt='(A,2X,A)') ' #10|10|10   Bend',name
      if(kpos.eq.3) then
        write(lw,fmt='(A)') '3 0. 0. 0.'
      else
        write(lw,fmt='(1P,I2,3(1x,e18.10))') kpos,xce,yce,ale
      endif

      if(Vbnd) then
        it = it+1
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
        write(lw,fmt='(a,1p,e16.8,a)') '0. 0. 0. ',-tilt,' 0. 0.'
      endif

      goto 99

 3    continue
C----- SBEN -> BEND
      if(xl * ang .eq. 0.d0) then
        if(xl .eq. 0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
          write(lw,fmt=txtfrm) '''MARKER''',name,' '//lbl2,it
        else
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
          write(lw,fmt=txtfrm) '''DRIFT''',name,' '//lbl2,it
          write(lw,fmt='(1P,E14.6)') xl*cm
        endif
        goto 99
      endif

      Vbnd = okV .and. abs(tilt).gt.1d-6
      if(Vbnd) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
        it = it+1
        write(lw,fmt='(a,1p,e16.8,a)') '0. 0. 0. ',tilt,' 0. 0.'
      endif

      ro=xl/ang
      b=bro/ro*t2kg

      if(b<0.d0) then
        write(lw,fmt=txtfrm) '''YMY''','YMY_IN ','NEG_B',it
        it = it+1
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''BEND''',fnwSeg,'NEG_B',it
      else
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''BEND''',name,' '//lbl2,it
      endif
      write(lw,fmt='(I1,A)') i0,'  .Bend'
      xxl = 2.d0*ro*sin(xl/2.d0/ro)
      write(lw,fmt='(F14.7,a,F15.8)') xxl*cm,' 0. ',abs(b) 
      if(b<0.d0) then 
        te = -e1
        ale = ang/2.d0
      else
        te=e1
        ale = -ang/2.d0
      endif
      if(frf .eq. 0.) then
        write(lw,fmt='(2F6.2,2(1x,F12.8))') x0,x0,te
      else
        write(lw,fmt='(2F6.2,2(1x,F12.8))') x20,x8,te
      endif
      write(lw,fmt='(A)') '4 .2401  1.8639  -.5572  .3904 0. 0. 0.'
      ts=e2
      if(b<0.d0) ts = -ts
      if(frf .eq. 0.) then
        write(lw,fmt='(2F6.2,2(1x,F12.8))') x0,x0,ts
      else
        write(lw,fmt='(2F6.2,2(1x,F12.8))') x20,x8,ts
      endif
      write(lw,fmt='(A)') '4 .2401  1.8639  -.5572  .3904 0. 0. 0.'
C      istepdip=int(xxl*cm/3.0d0)
      istepdip=int(xxl*cm)
      if(istepdip .ge. 100) then
        write(lw,fmt='(A,I3,A,2X,A)') '#200|',istepdip,
     + '|200    Bend',name
      elseif(istepdip .ge. 10  .and. istepdip .lt. 100) then
        write(lw,fmt='(A,I2,A,2X,A)') '#200|',istepdip,
     + '|200    Bend',name
      elseif(istepdip .lt. 10) then
        write(lw,fmt='(2A)') '#200|5|200    Bend',name 
      endif
      if(kpos.eq.3) then
C        write(lw,fmt='(A)') '3 0. 0. 0.'
        write(lw,fmt='(A,1p,e16.8)') '3 0. 0. ',ale
      else
        write(lw,fmt='(1P,I1,2X,3G18.10)') kpos,xce,yce,ale
      endif

      if(b<0.d0) then
        it = it+1
        write(lw,fmt=txtfrm) '''YMY''','YMY_OUT',' ',it
      endif
      if(Vbnd) then
        it = it+1
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
        write(lw,fmt='(a,1p,e16.8,a)') '0. 0. 0. ',-tilt,' 0. 0.'
      endif

      goto 99

 31   continue
C----- SBEN -> DIPOLE
      if(xl * ang .eq. 0.d0) then
        if(xl .eq. 0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
          write(lw,fmt=txtfrm) '''MARKER''',name,' '//lbl2,it
        else
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
          write(lw,fmt=txtfrm) '''DRIFT''',name,' '//lbl2,it
          write(lw,fmt='(1P,E14.6)') xl*cm
        endif
        goto 99
      endif

      b1=bro/(xl/ang)*t2kg
      ro=abs(xl/ang)
      ffang = 4.d0     ! deg
      at = abs(ang*180/(4.d0*atan(1.d0))) + 2.*ffang
      acn = ffang
      omgp = acn - ffang
      omgm = - ( at -acn -ffang)
      rm = ro*1.d2   ! cm
      b2 = ro**2 * ak1
      xs = -rm*tan(ACN/180.d0*(4.d0*atan(1.d0)))


      if(match) then

        call system('mkdir -p ./bendMatch/')
        ok = idluni(lunW)
        open(unit=lunW,file=
     >  './bendMatch/'//name(debstr(name):finstr(name))//'_FIT.dat')
        write(lunw,*) 'Generated using elegant -> Zgoubi translator'
        write(lunw,fmt='(A,T111,I6)') '''OBJET'''
        write(lunw,FMT='(a)') ' 1000. '
        write(lunw,fmt='(A)') '5' 
        write(lunw,fmt='(A)') '.01 .01 .01 .01 0. .001  '
        write(lunw,fmt='(A)') '0. 0. 0. 0. 0. 1. '

        nuel = 1
        nv = 0

        Vbnd = okV .and. abs(tilt).gt.1d-6
        if(Vbnd) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
          write(lunw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
          write(lunw,fmt='(a,1p,e16.8,a)') '0. 0. 0. ',tilt,' 0. 0.'
          nuel = nuel + 1
        endif

        if(b1<0.d0) then
          hnorm = -b1
          write(lunw,fmt=txtfrm) '''YMY''','YMY_IN ','NEG_B',it
          nuel = nuel + 1
        else
          hnorm = b1
        endif

c        it = it + 1
        nuel = nuel + 1
        write(lunw,fmt=txtfrm) '''CHANGREF''',name,'      ',it
        write(lunw,fmt='(a,f14.7,t65,a)') ' XS ',xs,
     >' ! RM*tan(ACN-omga+ ==ACN)'   
c        nuel = nuel + 1
c        nv = nv + 1
c        write(txt6,fmt='(i0)') nuel
c        write(txt2,fmt='(i0)') nv
c        if(xs.ne.0.) then
c          fitxt(nv) = txt6//' 1  0  .5      ! var#'//txt2//' XS'
c        else
c          fitxt(nv) = txt6//' 1  0  [-20,20]   ! var#'//txt2//' XS'
c        endif

        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lunw,fmt=txtfrm) '''DIPOLE''',name,' '//lbl2,it
        nuel = nuel + 1
        write(lunw,fmt='(I1,A)') i0,'  .Dipole'
        write(lunw,fmt='(F14.7,2x,F15.8,T65,A)')  AT, RM,' ! AT, RM'
        write(lunw,fmt='(F14.7,2x,2F15.8,a,T65,a)')acn,hnorm,b2,' 0. 0.'
     >  ,'        ! ACNT,  HNORM, indices'
        nv = nv + 1
        write(txt6,fmt='(i0)') nuel
        write(txt2,fmt='(i0)') nv
        fitxt(nv) = txt6//' 5  0  .1      ! var#'//txt2//' hnrm'        
        nv = nv + 1
        write(txt6,fmt='(i0)') nuel
        write(txt2,fmt='(i0)') nv
        if(b2.ne.0.d0) then
          fitxt(nv) = txt6//' 6  0  .9      ! var#'//txt2//' Indx'        
        else
          fitxt(nv) = txt6//' 6  0 [-.1,.1] ! var#'//txt2//' Indx'        
        endif
        write(lunw,fmt='(a)') ' 8. -1.         face 1 ' 
        write(lunw,fmt='(a)') ' 4 .1455 2.2670 -.6395 1.1558 0. 0. 0.'
        e1deg = e1/(4.*atan(1.d0))*180.d0
        write(lunw,fmt='(2(F14.7,2x),a)')omgp,-e1deg,
     >  ' 1.E6 -1.E6 1.E6 1.E6'
        write(lunw,fmt='(a)') ' 8. -1.         face 2 ' 
        write(lunw,fmt='(a)') ' 4 .1455 2.2670 -.6395 1.1558 0. 0. 0.'
        e2deg = e2/(4.*atan(1.d0))*180.d0
        write(lunw,fmt='(2(F14.7,2x),a)')omgm,-e2deg,
     >  ' 1.E6 -1.E6 1.E6 1.E6'
        write(lunw,fmt='(a)') ' 0.  0.         face 3 ' 
        write(lunw,fmt='(a)') ' 4 .1455 2.2670 -.6395 1.1558 0. 0. 0.'
        write(lunw,fmt='(a)') ' 0. 0.   1.E6 -1.E6 1.E6 1.E6  0.'
        write(lunw,fmt='(2A)') ' 2   64           '
        write(lunw,fmt='(2A)') ' .2               '
        rers = rm/cos(ffrad)
        ffrad = ffang/180.*(4.*atan(1.d0))
        write(lunw,fmt='(a,4(f13.7,1x),t70,A)') ' 2  '
     >  ,rers, -ffrad, rers, +ffrad, '  ! 63-67'
        nv = nv + 1
        write(txt6,fmt='(i0)') nuel
        write(txt2,fmt='(i0)') nv
        fitxt(nv) = txt6//' 64 4.066  .2  ! var#'//txt2//' ReRs'        

c        it = it + 1
        write(lunw,fmt=txtfrm) '''CHANGREF''',name,'      ',it
        write(lunw,fmt='(a,f14.7,t65,a)') ' XS ',xs,
     >  ' ! RM*tan(ACN-omga+ ==ACN)'   
        nuel = nuel + 1

        if(b<0.d0) then
          write(lunw,fmt=txtfrm) '''YMY''','YMY_OUT',' ',it
        endif

        if(Vbnd) then
c          it = it+1
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
          write(lunw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
          write(lunw,fmt='(a,1p,e16.8,a)') '0. 0. 0. ',-tilt,' 0. 0.'
        endif

        write(lunw,FMT='(A)') '''MATRIX'''
        write(lunw,FMT='(A)') ' 1 0 '
        write(lunw,fmt='(A)') '''FIT2'' '
        write(lunw,FMT='(i0,a)') nv , '    noSYSout save'
        do i = 1, nv
          write(lunW,*) fitxt(i)
        enddo

        if(len(name(debstr(name):finstr(name))).gt.1)
     >   call getRijInd(name(debstr(name):finstr(name)),
     >                   r11,r12,r33,r34)
        nc = 8
        write(lunw,FMT='(i0,1x,1p,e10.2)') nc,pnlty
        write(lunw,FMT='(a,1p,e13.5,a)') '1 1 1 #End ',R11,' 1. 0'
        write(lunw,FMT='(a,1p,e13.5,a)') '1 1 2 #End ',R12,' 1. 0'
        write(lunw,FMT='(a,1p,e13.5,a)') '1 3 3 #End ',R33,' 1. 0'
        write(lunw,FMT='(a,1p,e13.5,a)') '1 3 4 #End ',R34,' 1. 0'
        write(lunw,FMT='(a)') '3 1 2 #End 0. 1. 0'
        write(lunw,FMT='(a)') '3 1 3 #End 0. 1. 0'
        write(lunw,FMT='(a)') '3 1 4 #End 0. 1. 0'
        write(lunw,FMT='(a)') '3 1 5 #End 0. 1. 0'
        write(lunw,FMT='(A)') '''MATRIX'''
        write(lunw,FMT='(A)') ' 1 0 '
        write(lunw,FMT='(A)') '''END'''
        close(lunW)

        cmmnd = '(cd ./bendMatch ; \cp '//
     >  name(debstr(name):finstr(name))//'_FIT.dat zgoubi.dat ; '
     >//'  ~/zgoubi/current/zgoubi/zgoubi )'
        call system(cmmnd)
        cmmnd = '(cd ./bendMatch ; \cp zgoubi.FITVALS.out '//
     >  name(debstr(name):finstr(name))//'_zgoubi.FITVALS.out )'
        call system(cmmnd)
        cmmnd = '(cd ./bendMatch ; mv -f zgoubi.res '//
     >  name(debstr(name):finstr(name))//'_FIT.res )'
        call system(cmmnd)

C Now get new parameter values as of FIT
        ok = idluni(
     >              lrfit)
        open(unit=lrfit,file='./bendMatch'//'/'//
     >  name(debstr(name):finstr(name))//'_zgoubi.FITVALS.out')
        ok = gttext(6,lrfit,'STATUS OF V',
     >                               txt)
        read(lrfit,*) txt
c        write(*,*) ' gttext  ',txt
c              read(*,*)        
     
        read(lrfit,fmt='(a)',end=445,err=445) txt
c        write(*,*) ' variables  ',txt
c        write(*,*) ' variables  ',txt
c        write(*,*) ' variables  ',txt
        do while (txt(debstr(txt):debstr(txt)+5) .ne. 'STATUS')
c          write(*,*) ' variables  ',txt(debstr(txt):debstr(txt)+5)
          read(txt,*) nlm,nvar,mpar,dum,dum,var(nvar)
c          write(*,*) ' '
c          write(*,*) ' variable value : ', nlm,nvar,mpar,var(nvar)
          read(lrfit,fmt='(a)',end=445,err=445) txt
c          write(*,*) ' variables loop ',txt
c          read(*,*)
        enddo
 445    continue
        close(lrfit)

        do i = 1, nv
           txt4=fitxt(i)(finstr(fitxt(i))-3:finstr(fitxt(i)))
           if(txt4 .eq. 'hnrm') hnorm =var(i)   
           if(txt4 .eq. 'Indx') b2 =var(i)
           if(txt4 .eq. 'ReRs') ReRs=var(i)

c           write(*,*) ' bmad2z i, txt4, var(i) : ',i, txt4,hnorm,b2,ReRs
c                   read(*,*)

        enddo

C-------------------------------------------------
CCCCCCCCCCCCCCCCCCCCCCc      
      endif ! match

      Vbnd = okV .and. abs(tilt).gt.1d-6
      if(Vbnd) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
        it = it+1
        write(lw,fmt='(a,1p,e16.8,a)') '0. 0. 0. ',tilt,' 0. 0.'
      endif

      if(b1<0.d0) then
c        hnorm = -b1
        write(lw,fmt=txtfrm) '''YMY''','YMY_IN ','NEG_B',it
          it = it+1
c      else
c        hnorm = b1
      endif

c         write(*,*) ' bmad2z i, txt4, var(i) //// ',i, txt4,hnorm,b2,ReRs
c                   read(*,*)

      write(lw,fmt=txtfrm) '''CHANGREF''',name,'      ',it
      it = it + 1
      write(lw,fmt='(a,f14.7,t65,a)') ' XS ',xs,
     >' ! RM*tan(ACN-omga+ ==ACN)'   

c 'TRAROT'   MXQ1S01               SBEN             
c 0. 0. 0.  -1.570796E+00 0. 0.
c 'CHANGREF'
c XS -22.0023076169     ! RM*tan(ACN-omga+ ==ACN)
c 'DIPOLE' MXQ1S01               SBEN                
c  0                                                                             
c 26.6341335016  314.647658107                             AT, RM                               
c 4. 3.177570990 2.9806237063E-02 0. 0.                          ACNT,  HNORM, indices           
c 8. -1.                                       face 1                    ! 10                      
c 4  .1455   2.2670  -.6395  1.1558  0. 0.  0.                           ! 18        
c 0.   0.    1.E6  -1.E6  1.E6  1.E6                                           
c 8. -1.                                       face 2                           
c 4  .1455   2.2670  -.6395  1.1558  0. 0.  0.                                   
c -18.6341335016   -18.6341335016   1.E6  -1.E6  1.E6  1.E6               ! 40   
c 0  0.      0.      0.      0.      0. 0.  0.                                   
c 0.  0.  1.E6  -1.E6  1.E6  1.E6 0.                                     ! 57             
c 2  64.                                                 IRD(=2, 25 or 4), resol(
c .1                                         step                               
c 2  315.5203145  -0.0698131700798  315.5203145  0.0698131700798        ! 63-67
c 'CHANGREF'
c XS -22.0023076169     ! RM*tan(AT-ACN+omga- == ACN-omga+ ==ACN)
c 'TRAROT'   MXQ1S01               SBEN             
c 0. 0. 0.   1.570796E+00 0. 0.

        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''DIPOLE''',name,' '//lbl2,it
      it = it + 1
c      at = abs(ang)*180.d0/4.d0*atan(1.d0) 
        write(lw,fmt='(I1,A)') i0,'  .Dipole'
        write(lw,fmt='(F14.7,2x,F15.8,T65,A)')  AT, RM,' ! AT, RM'
        write(lw,fmt='(F14.7,2x,2F15.8,a,T65,a)')acn,hnorm,b2,' 0. 0.'
     >  ,'        ! ACNT,  HNORM, indices'
        write(lw,fmt='(a)') ' 8. -1.         face 1 ' 
        write(lw,fmt='(a)') ' 4 .1455 2.2670 -.6395 1.1558 0. 0. 0.'
        write(lw,fmt='(2(F14.7,2x),a)')omgp,e1,' 1.E6 -1.E6 1.E6 1.E6'
        write(lw,fmt='(a)') ' 8. -1.         face 2 ' 
        write(lw,fmt='(a)') ' 4 .1455 2.2670 -.6395 1.1558 0. 0. 0.'
        e2deg = e2/(4.*atan(1.d0))*180.d0
        write(lw,fmt='(2(F14.7,2x),a)')omgm,-e2deg,
     >  ' 1.E6 -1.E6 1.E6 1.E6'
        write(lw,fmt='(a)') ' 0.  0.         face 3 ' 
        write(lw,fmt='(a)') ' 4 .1455 2.2670 -.6395 1.1558 0. 0. 0.'
        write(lw,fmt='(a)') ' 0. 0.   1.E6 -1.E6 1.E6 1.E6  0.'

        write(lw,fmt='(2A)') ' 2   64           '
        write(lw,fmt='(2A)') ' .2               '
        ffrad = ffang/180.*(4.*atan(1.d0))
        write(lw,fmt='(a,4(f13.7,1x),t70,A)') ' 2  '
     >  ,rers, -ffrad, rers, +ffrad, '  ! 63-67'

      write(lw,fmt=txtfrm) '''CHANGREF''',name,'      ',it
      it = it + 1
      write(lw,fmt='(a,f14.7,t65,a)') ' XS ',xs,
     >' ! RM*tan(ACN-omga+ ==ACN)'   

c         write(*,*) ' bmad2z i, txt4, var(i) // ',i, txt4,hnorm,b2,ReRs
c                   read(*,*)

      if(b<0.d0) 
     >write(lw,fmt=txtfrm) '''YMY''','YMY_OUT',' ',it

      if(Vbnd) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
        write(lw,fmt='(a,1p,e16.8,a)') '0. 0. 0. ',-tilt,' 0. 0.'
      endif

      goto 99

 4    continue
C----- QUAD
      if(xl .eq. 0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''MARKER''',name,' '//lbl2,it
        goto 99
      endif
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''MULTIPOL''',name,' '//lbl2,it
      write(lw,fmt='(I1,A)') i0,'  .Quad'
      write(lw,fmt='(F12.6,1x,F7.2,2(1x,F15.9),8(1x,F3.1))')
     >xl*cm,x10,x0,ak1/bro,x0,x0,x0,x0,x0,x0,x0,x0
      txt = txffq
      txt=txt//name
      if(frf .eq. 0.) txt = '0. 0. '//txt
      write(lw,fmt='(A)') txt
      write(lw,fmt='(A)') txfq
      write(lw,fmt='(A)') txt
      write(lw,fmt='(A)') txfq
      write(lw,fmt='(A)') ' 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.'
      write(lw,fmt='(2A)')  ' 0.5   ! cm ', kley
c      if(xl*cm-int(xl*cm).gt.0.5) then 
c            istepdip=int(xl*cm)+1
c      else
c            istepdip=int(xl*cm)
c      endif
c      if(istepdip .le. 0) istepdip = 2
c      write(lw,fmt='(A,I0,A,2X,A)') ' #30|',istepdip,'|30   Quad',name
c      write(lw,fmt='(A,2X,A)') '#10|10|10  Quad',name
      write(lw,fmt='(A)') '1 0. 0. 0.'
      goto 99

 5    continue
C----- SEXT ***
      if(xl .eq. 0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''MARKER''',name,' '//lbl2,it
        goto 99
      endif
        it = it + 1
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''MULTIPOL''',name,' '//lbl2,it
      write(lw,fmt='(I1,A)') i0,'  .Sext'
      b3 = 10.d0 * ak2 * bro *(x10/100.)**2 / 2.d0 
      write(lw,fmt='(F12.6,1x,F7.2,2(1x,F15.9),8(1x,F3.1))')
     >xl*cm,x10,x0,x0,b3,x0,x0,x0,x0,x0,x0,x0
      write(lw,fmt='(A)') '0.00 0.00  1.00 0.0 .0 0.0 .0 0.0 .0 0.0 .0'
      write(lw,fmt='(A)') txfq//name
      write(lw,fmt='(A)') '0.00 0.00  1.00 0.0 .0 0.0 .0 0.0 .0 0.0 .0'
      write(lw,fmt='(A)') txfq//name
        write(lw,fmt='(A)') ' 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.'

      write(lw,fmt='(2A)')  ' 0.5   ! cm ', kley

c      if(xl*cm-int(xl*cm).gt.0.5) then 
c            istepdip=int(xl*cm)+1
c      else
c            istepdip=int(xl*cm)
c      endif
c      if(istepdip.lt.10) then
c        write(lw,fmt='(2A)') ' #30|9|30   Sext',name
c      elseif(istepdip.ge.10.and.istepdip.lt.100) then
c        write(lw,fmt='(A,I2,A,2X,A)') ' #30|',istepdip,'|30   Sext',name
c      elseif(istepdip.ge.100.and.istepdip.lt.1000) then
c        write(lw,fmt='(A,I3,A,2X,A)') ' #30|',istepdip,'|30   Sext',name
c      elseif(istepdip.ge.1000) then
c        write(lw,fmt='(2A)') ' #30|9999|30   Sext',name
c      endif
C      write(lw,fmt='(A,2X,A)') '#10|10|10  Sext',name
      write(lw,fmt='(A)') '1 0. 0. 0.'
      goto 99

 6    continue
C----- OCTU ***
      if(xl .eq. 0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''MARKER''',name,' '//lbl2,it
C        it = it - 1
        goto 99
      endif
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''MULTIPOL''',name,' '//lbl2,it
      write(lw,fmt='(I1,A)') i0,'  .Octu'
      write(lw,fmt='(F12.6,1x,F7.2,2(1x,F15.9),8(1x,F3.1))')
     >xl*cm,x10,x0,x0,x0,x0,x0,x0
      write(lw,fmt='(A)') '0.000 0.00  1.00 0.0 .0 0.0 .0 0.0 .0 0.0 .0'
      write(lw,fmt='(A)') txfq//name
      write(lw,fmt='(A)') '0.000 0.00  1.00 0.0 .0 0.0 .0 0.0 .0 0.0 .0'
      write(lw,fmt='(A)') txfq//name
        write(lw,fmt='(A)') ' 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.'
      if(xl*cm-int(xl*cm).gt.0.5) then 
            istepdip=int(xl*cm)+1
      else
            istepdip=int(xl*cm)
      endif
      if(istepdip.lt.10) then
        write(lw,fmt='(2A)') ' #30|9|30   Octu',name
      elseif(istepdip.ge.10.and.istepdip.lt.100) then
        write(lw,fmt='(A,I2,A,2X,A)') ' #30|',istepdip,'|30   Octu',name
      elseif(istepdip.ge.100.and.istepdip.lt.1000) then
        write(lw,fmt='(A,I3,A,2X,A)') ' #30|',istepdip,'|30   Octu',name
      elseif(istepdip.ge.1000) then
        write(lw,fmt='(2A)') ' #30|9999|30   Octu',name
      endif
C      write(lw,fmt='(A,2X,A)') '#20|20|20  Octu',name
      write(lw,fmt='(A)') '1 0. 0. 0.'
       goto 99

 7    continue
C----- MULT
      if(abs(ak1)+abs(ak2)+abs(ak3)+abs(ak4) .gt. 1.d-30) then
        xl = 1.d-5
      else
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm)'''MARKER''',name,' '//lbl2,it
        goto 99
      endif
! quadrupole field at .1 m (kG)
      b2 = ak1/xl * bro   
! sextupole field at .1 m (kG)
      b3 = 10.d0 * ak2/xl * bro *(x10/100.)**2 / 2.d0  
! octupole field at .1 m (kG)
      b4 = 0.d0
      b5 = 0.d0
      b6 = 0.d0
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''MULTIPOL''',name,' '//lbl2,it
      write(lw,fmt='(I1,A)') i0,'  .Mult'
      write(lw,fmt='(F12.6,1x,F7.2,2(1x,F15.9),8(1x,F3.1))')
     >xl*cm,x10,x0,b2,b3,b4,b5,b6,x0,x0,x0,x0
c      write(*,*)
c     >b1,b2,b3,b4,b5,b6,bro,' b1,b2,b3,b4,b5,b6, bro'
c          stop
c      write(*,*) ak1,' ak1 '
c      write(87,*)
c     > abs(ak1)+abs(ak2)+abs(ak3)+abs(ak4),' abs(k1)+abs(k2...'
      write(lw,fmt='(A)') '00.00 00.0  1.00 0.0 .0 0.0 .0 0.0 .0 0.0 .0'
      write(lw,fmt='(A)') txfq//name
      write(lw,fmt='(A)') '00.00 00.0  1.00 0.0 .0 0.0 .0 0.0 .0 0.0 .0'
      write(lw,fmt='(A)') txfq//name
        write(lw,fmt='(A)') ' 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.'
      if(xl*cm-int(xl*cm).gt.0.5) then 
            istepdip=int(xl*cm)+1
      else
            istepdip=int(xl*cm)
      endif
      if(istepdip.lt.10) then
        write(lw,fmt='(2A)') ' #30|9|30   Mult',name
      elseif(istepdip.ge.10.and.istepdip.lt.100) then
        write(lw,fmt='(A,I2,A,2X,A)') ' #30|',istepdip,'|30   Mult',name
      elseif(istepdip.ge.100.and.istepdip.lt.1000) then
        write(lw,fmt='(A,I3,A,2X,A)') ' #30|',istepdip,'|30   Mult',name
      elseif(istepdip.ge.1000) then
        write(lw,fmt='(2A)') ' #30|9999|30   Mult',name
      endif
C      write(lw,fmt='(A,2X,A)') '#20|20|20  Mult',name
      write(lw,fmt='(A)') '1 0. 0. 0.'
       goto 99

 8    continue
C----- SROT ***
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
      goto 99

 9    continue
C----- YROT ***
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''TRAROT''',name,' '//lbl2,it
      goto 99

 10   continue
C----- MARK, WATC(H) ***
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''MARKER''',name,' '//lbl2,it
      goto 99

 11   continue
C----- KICK ***
      xxl = xl
      if(xl .eq. 0.d0) xxl = 1.e-6
      if(ik.eq.14) then
c--------- hkicker
        diptlt = 0.d0
        b = -bro*hkic/xxl*t2kg
      elseif(ik.eq.15) then
c--------- vkicker
        diptlt = pi/2.d0
        b = -bro*vkic/xxl*t2kg
      endif
c             write(*,*) ' KICK, hkic, vkic :', hkic, vkic
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''MULTIPOL''',name,' '//lbl2,it
      write(lw,fmt='(I1,A)') i0,'  .kicker'
      write(lw,fmt='(F12.6,1x,F7.2,2(1x,F15.9),7(1x,F3.1))')
     >xxl*cm,x10,b,x0,x0,x0,x0,x0,x0,x0,x0,x0
      txt = '.0 .0  1.00 0.00 0.00 0.00 0.00 0. 0. 0. 0.'
      write(lw,fmt='(A)') txt
      write(lw,fmt='(A)') txfd
      write(lw,fmt='(A)') txt
      write(lw,fmt='(A)') txfd
      write(lw,fmt='(f12.9,A)') diptlt,' 0. 0. 0. 0. 0. 0. 0. 0. 0.'
      write(lw,fmt='(A)') '#20|4|20  Kick'
      write(lw,fmt='(A)') '1 0. 0. 0.'
      goto 99

 12   continue
C----- HMON, VMON
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''DRIFT''',name,' '//lbl2,it
      write(lw,fmt='(F12.4)') xl*cm
      goto 99

 13   continue
C 'SOLENOID'                                                                            2
C   0
C   3000.  26.1   15.         ***************************         0.29866369046pourEps=.0223
C   50.  100.            100. 100. **************************
C #400|1200|400
C   1  0. 0. 0.
C----- SOLE -> SOLENOID
      if(xl .eq. 0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm) '''MARKER''',name,' '//lbl2,it
C        it = it - 1
        goto 99
      endif
      r0 = 111.11
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''SOLENOID''',name,' '//lbl2,it
      write(lw,fmt='(I1,A)') i0,'  .soleno'
      write(lw,fmt='(1P,G14.7,G10.4,G14.7)') xl*cm,r0,e1*bro*t2kg
      write(lw,fmt='(2F10.2)') r0, r0
      write(lw,fmt='(A,2X,A)') '1.  Soleno',name
      write(lw,fmt='(A)') '1 0. 0. 0. '
      goto 99

 18   continue
C----- MATR
      if(xl .eq. 0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm)'''MARKER''',name,' '//lbl2,it
        goto 99
      else
        stop ' Element MATR not translated' 
      endif
      goto 99

 19   continue
C----- RFCA
      if(xl .eq. 0.d0) then
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
        write(lw,fmt=txtfrm)'''MARKER''',name,' '//lbl2,it
        goto 99
      endif
      if( okAutoref) then
       if(name .eq. 'R121' .or. name .eq. 'R221') then
        write(lw,fmt='(a)') '''AUTOREF'''
        write(lw,fmt='(a)') ' 1     ! Traj #1 is H-reference'
        write(lw,fmt='(a)') '''AUTOREF'''
        write(lw,fmt='(a)') ' 1.5   ! Traj #1 is H- & V-reference'
        write(lw,fmt='(a)') '''FAISCEAU'''
       endif
      endif
        lbl2 = fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,fmt=txtfrm) '''CAVITE''',name,' '//lbl2,it
      write(lw,fmt='(a)') '10     CEBAF'
      write(lw,fmt='(1p,2(e23.15,2x))') xl, freq
C      write(lw,fmt='(1p,2(e23.15,2x),a)') volt, (phas-90.d0)/180.d0*pi, 
      write(lw,fmt='(1p,2(e23.15,2x),a)') volt, phas/180.d0*pi, 
     >                           ' -1     ! 0 : boost+drift'
C     >                           ' 1     ! 0 : boost+drift'
C     >                           ' 0     ! 0 : boost+drift'
      goto 99

 99    continue
c       write(*,fmt='(A,T12,A)') kley,name
       return

      entry lmntV(okVi)
      okV = okVi
      return

      entry lmntff(kff)

      if(kff .eq.1) then
!-------- LHC
        txffd = ffdlhc
        txfd = fdlhc
        txffq = ffqlhc
        txfq = fqlhc        
      else if(kff .eq.2) then
!-------- Recycler      
        txffd = ffdrec
        txfd = fdrec
        txffq = ffqrec
        txfq = fqrec
      else if(kff .eq.3) then
!-------- muon collider 
        txffq = ffqmua
        txfq = fqmua
        txffd = ffdlhc
        txfd = fdlhc
      else
        txffd = ffd
        txfd = fd
        txffq = ffq
        txfq = fq
      endif

c      write(*,fmt='(A)') txffd ,txfd,txffq ,txfq

      return

      entry lmnkpo(xcei,ycei,alei,kposi)
      kpos=kposi
      xce=xcei
      yce=ycei
      ale=alei
      return

      entry lmndri(ny)
      drimul=ny.eq.'y'
      return

      entry lmnkbm(kbmi)
      kbm =kbmi 
      return

      end
      FUNCTION DEBSTR(STRING)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DEBSTR
      CHARACTER * (*) STRING

C     --------------------------------------
C     RENVOIE DANS DEBSTR LE RANG DU
C     1-ER CHARACTER NON BLANC DE STRING,
C     OU BIEN 0 SI STRING EST VIDE ou BLANC.
C     --------------------------------------

      DEBSTR=0
      LENGTH=LEN(STRING)
1     CONTINUE
        DEBSTR=DEBSTR+1
        IF (STRING(DEBSTR:DEBSTR) .EQ. ' ') THEN
          IF(DEBSTR .EQ. LENGTH) THEN
            DEBSTR = 0
            RETURN
          ELSE
            GOTO 1
          ENDIF
        ENDIF

      RETURN
      END
      FUNCTION FINSTR(STRING)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER FINSTR
      CHARACTER * (*) STRING
C     --------------------------------------
C     RENVOIE DANS FINSTR LE RANG DU
C     DERNIER CHARACTER NON BLANC DE STRING,
C     OU BIEN 0 SI STRING EST VIDE ou BLANC.
C     --------------------------------------

      FINSTR=LEN(STRING)+1
1     CONTINUE
        FINSTR=FINSTR-1
        IF(FINSTR .EQ. 0) RETURN
        IF (STRING(FINSTR:FINSTR) .EQ. ' ') GOTO 1

      RETURN
      END
      FUNCTION STRCON(STR,STR2,
     >                         IS)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL STRCON
      CHARACTER STR*(*), STR2*(*)
C     ---------------------------------------------------------------
C     .TRUE. if the string STR contains the string STR2 at least once
C     IS = position of first occurence of STR2 in STR 
C     (i.e.,STR(IS:IS+LEN(STR2)-1)=STR2)
C     ---------------------------------------------------------------
      INTEGER DEBSTR,FINSTR
      LNG2 = LEN(STR2(DEBSTR(STR2):FINSTR(STR2)))
      IF(LEN(STR).LT.LNG2) GOTO 1
      DO I = DEBSTR(STR), FINSTR(STR)-LNG2+1
        IF( STR(I:I+LNG2-1) .EQ. STR2 ) THEN
          IS = I 
          STRCON = .TRUE.
          RETURN
        ENDIF
      ENDDO
 1    CONTINUE
      STRCON = .FALSE.
      RETURN
      END
      SUBROUTINE STRGET(STR,MSS,
     >                          NST,STRA)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      CHARACTER(*) STRA(*)
      CHARACTER(*) STR
C     ------------------------------------------------------
C     Extract substrings #1 up to #MSS, out of string STR. 
C     Strings are assumed spaced by (at least) one blank. 
C     They are saved in  array STRA, and their total number 
C     (possibly < mss) is NST.
C     ------------------------------------------------------
      INTEGER DEBSTR, FINSTR

      CHARACTER(2000) STR0

      IF(LEN(STR0).LT.LEN(STR)) 
     >stop ' Sbr strget : increase length of string str0.'

      STR0 = STR
      IE = FINSTR(STR)
      NST = 0
      I2 = 1

 1    CONTINUE

        IF(STR(I2:I2) .EQ. ' '  .OR. 
     >     STR(I2:I2) .EQ. ',') THEN
          I2 = I2 + 1
          IF(I2 .LE. IE) GOTO 1
        ELSE
          I1 = I2
 2        CONTINUE
          I2 = I2 + 1
          IF(I2 .LE. IE) THEN
            IF(STR(I2:I2) .EQ. ' '  .OR. 
     >         STR(I2:I2) .EQ. ',') THEN
              IF(NST .LT. MSS) THEN
                NST = NST + 1
                STRA(NST) = STR(I1:I2-1)
                I2 = I2 + 1
                GOTO 1
              ENDIF
            ELSE
              GOTO 2
            ENDIF
          ELSE
            IF(STR(I2-1:I2-1) .NE. ' ' .AND.
     >         STR(I2-1:I2-1) .NE. ',') THEN
              IF(NST .LT. MSS) THEN
                NST = NST + 1
                STRA(NST) = STR(I1:I2-1)
              ENDIF
            ENDIF
          ENDIF
        ENDIF

      STR = STR0

c      call ZGNOEL(
c     >             NOEL)
c       if(noel.eq.89) then
c           write(*,*) ' strget  //////////////////'
c           write(*,*) ' strget  NST = ', nst
c           write(*,*) ' strget ', (stra(i),i=1,nst)
c            write(*,*) ' strget  //////////////////'
c              read(*,*)     
c          endif

      RETURN
      END
      subroutine read2(lr,     
     >  xl, ang, ak1,ak2,ak3,ak4, tilt, e1,e2, h1,h2,sCntr,
     >  hkic,vkic,volt, phas, freq, chrg, phRef,  
     >  kley,name, hgap, fint, dKMeV, ier)
      implicit double precision (a-h,o-z)
      character(*) kley, name
      character(10) kle
      character(80) txt80
      integer debstr, finstr
      parameter(mss=5)
      character(80) stra(mss), stra1, stra2
      logical first, rd

      data txt80 / ' ' /
c         write(*,*) ' ***************',txt80
c             read(*,*)

      ier = 0

      first = .true.
 1    continue
        read(lr,fmt='(a)',err=10,end=11) txt80
c         write(*,*) txt80
        txt80 = txt80(debstr(txt80):finstr(txt80))
        call strget(txt80,mss,
     >                       nss,stra)
        rd = .false.
        if(first) then
          if(nss .ge. 1) then
            stra1 = stra(1)
            if(nss .ge. 2) then
              stra2 = stra(2)          
              if(nss.ge.4) rd = .true.
            endif
          endif
          first = .false.
        else
          if(nss .ge. 2) then
            if(stra(1) .ne. stra1 .or. stra2.ne.stra(2)) goto 10
            if(nss.ge.4) rd = .true.
          endif
        endif
          
        if(rd) then
          name = stra(1)
          kle = stra(2)
          if    (kle .eq. 'KQUAD') then
            kley = 'QUAD'
          elseif(kle .eq. 'KSEXT') then
            kley = 'SEXT'
          elseif(kle .eq. 'CSBEND') then
            kley = 'SBEN'
          elseif(kle .eq. 'WATCH') then
            kley = 'WATC'
c            write(*,*) ' WATCH. kley, name : ', kley,' ',name
c                 read(*,*) 
          else
            kley = kle
          endif

          if(stra(3) .eq. 'L') read(stra(4),*) xl  
          if(stra(3) .eq. 'ANGLE')  read(stra(4),*) ang
          if(stra(3) .eq. 'K1')  read(stra(4),*) ak1
          if(stra(3) .eq. 'K2')  read(stra(4),*) ak2
          if(stra(3) .eq. 'K3')  read(stra(4),*) ak3
          if(stra(3) .eq. 'K4')  read(stra(4),*) ak4
          if(stra(3) .eq. 'K5')  read(stra(4),*) ak5
          if(stra(3) .eq. 'K6')  read(stra(4),*) ak6
          if(stra(3) .eq. 'K7')  read(stra(4),*) ak7
          if(stra(3) .eq. 'K8')  read(stra(4),*) ak8
          if(stra(3) .eq. 'E1')  read(stra(4),*) e1
          if(stra(3) .eq. 'E2')  read(stra(4),*) e2
          if(stra(3) .eq. 'TILT')  read(stra(4),*) tilt
          if(stra(3) .eq. 'BORE')  read(stra(4),*) bore
          if(stra(3) .eq. 'B')  read(stra(4),*) bfld
          if(stra(3) .eq. 'H1')  read(stra(4),*) h1
          if(stra(3) .eq. 'H2')  read(stra(4),*) h2
          if(stra(3) .eq. 'HGAP')  read(stra(4),*) hgap
          if(stra(3) .eq. 'FINT')  read(stra(4),*) FINT
          if(stra(3) .eq. 'EDGE1_EFFECTS')  read(stra(4),*) e1ff
          if(stra(3) .eq. 'EDGE2_EFFECTS')  read(stra(4),*) e2ff
          if(stra(3) .eq. 'KICK')  read(stra(4),*) ckik
          if(stra(3) .eq. 'VOLT')  read(stra(4),*) volt 
          if(stra(3) .eq. 'PHASE')  read(stra(4),*) phas
          if(stra(3) .eq. 'FREQ')  read(stra(4),*) freq
          if(stra(3) .eq. 'Q')  read(stra(4),*) chrg
          if(stra(3) .eq. 'PHASE_REFERENCE')  read(stra(4),*) phRef
          if(stra(3) .eq. 'CHANGE_P0')  read(stra(4),*) chP0
          if(stra(3) .eq. 'CHANGE_T')  read(stra(4),*) chT 
          if(stra(3) .eq. 'END1_FOCUS')  read(stra(4),*) foc1
          if(stra(3) .eq. 'END2_FOCUS')  read(stra(4),*) foc2
          if(stra(3) .eq. 'T_REFERENCE')  read(stra(4),*) TRef
          if(stra(3) .eq. 'LINEARIZE')  read(stra(4),*) xli
          if(stra(3) .eq. 'LOCK_PHASE')  read(stra(4),*) phLock

          if(bore.gt. 1.d-6) ak1 = bfld/bore

          if(kley .eq. 'HKICK') hkick = ckik 
          if(kley .eq. 'VKICK') vkick = ckik 

        endif
      goto 1    
      
 10   continue
      backspace(lr)
C           write(88,*) ' AK1 in read2 : ',ak1
c      ak1 = ak1 * xl
c           write(88,*) ' AK1*L in read2 : ',ak1

          if(kley .eq. 'RFCA') then 
             ddKMeV = volt*sin(phas/180.d0*(4.d0*atan(1.d0)))/1.d6
            dKMeV=dKMeV+ ddKMeV
c            write(88,*) ' RFCA  ',name,volt, phas, ddKMeV,dKMeV
          endif

      return

 11   continue
      ier = 1
      return
      end
      FUNCTION IDLUNI(
     >                LN)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL IDLUNI

      LOGICAL OPN

      I = 20
 1    CONTINUE
        INQUIRE(UNIT=I,ERR=99,IOSTAT=IOS,OPENED=OPN)
        I = I+1
        IF(I .EQ. 97) GOTO 99
        IF(OPN) GOTO 1
C        IF(IOS .GT. 0) GOTO 1
      
      LN = I-1
      IDLUNI = .TRUE.
      RETURN

 99   CONTINUE
      LN = 0
      IDLUNI = .FALSE.
      RETURN
      END
      subroutine getRijInd(name,
     >                       r11,r12,r33,r34)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL IDLUNI, ok, strcon
C      character(*) name, matIndiv
      character(*) name
      character(800) txt800
      logical first
      integer debstr, finstr
      save lune
      data first / .true. /

      if(first) then
        ok = idluni(
     >            lune)
            write(*,*) ' ******',name


C        open(unit=lune,file=matIndiv)
        open(unit=lune,file='ele.mat_indiv')
        first = .false.
      endif

 1    continue
        read(lune,fmt='(a)',err=99,end=98) txt800
c            write(*,*) ' txt800  ',txt800
c                read(*,*)
        if(strcon(txt800,name(debstr(name):finstr(name)), 
     >                                              is)) then

          read(txt800,*) s,r11,r12,r13,r14,r15,r16,
     >    r21,r22,r23,r24,r25,r26,
     >    r31,r32,r33,r34,r35,r36,
     >    r41,r42,r43,r44,r45,r46
       else
         goto 1
       endif

       write(*,*) '  '
       write(*,*) ' getRij Rij : ',name
       write(*,*) '   r11,r12,r16 : ',r11,r12,r16 
       write(*,*) '   r33,r34,r36 : ',r33,r34,r36  
c              read(*,*)

      return

 97   stop 'Pgm getRijInd. Error during read txt800.'

 99   stop 'Pgm getRijInd. Error during read matIndiv.'
      
 98   write(*,*) ' End of file matIndiv.'
      write(*,*) ' was looking for this text : '
     >//name(debstr(name):finstr(name))
        stop 

      end 

      subroutine getRijCum(name,
     >                       r11,r12,r16,r26,
     >                       r33,r34,r36,r46)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL IDLUNI, ok, strcon
C      character(*) name, matIndiv
      character(*) name
      character(800) txt800
      logical first
      integer debstr, finstr
      save lune
      data first / .true. /

      if(first) then
        ok = idluni(
     >            lune)
c            write(*,*) ' ***',matIndiv,'***'
c                read(*,*)

C        open(unit=lune,file=matIndiv)
        open(unit=lune,file='ele.mat_cumul')
        first = .false.
      endif

 1    continue
        read(lune,fmt='(a)',err=99,end=98) txt800
        if(strcon(txt800,name(debstr(name):finstr(name)), 
     >                                              is)) then
          read(txt800,*) s,r11,r12,r13,r14,r15,r16,
     >    r21,r22,r23,r24,r25,r26,
     >    r31,r32,r33,r34,r35,r36,
     >    r41,r42,r43,r44,r45,r46
c            write(*,*) ' getrijcum', name,r11,r12,r13,r14,r15,r16
c                     read(*,*)
       else
         goto 1
       endif

c       write(*,*) '  '
c       write(*,*) ' getRij Rij : ',name
c       write(*,*) '   r11,r12,r16 : ',r11,r12,r16 
c       write(*,*) '   r33,r34,r36 : ',r33,r34,r36  
c              read(*,*)

      return

 97   stop 'Pgm getRijCum. Error during read txt800.'

 99   stop 'Pgm getRijCum Error during read matCumul.'
      
 98   write(*,*) ' End of file matCumul.'
          write(*,*) ' was looking for this text : '
     >//name(debstr(name):finstr(name))
      stop 

      return
      end 

      subroutine getTwi(fnwSeg,name,iobj, kSeg,
     >                      alfx,betx,dx,dxp,
     >                      alfy,bety,dy,dyp)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL IDLUNI, ok, strcon
      character(*) name, fnwSeg
      character(800) txt800, txt800_1
      logical first
      integer debstr, finstr
      save lune
      data first / .true. /

      if(first) then
        ok = idluni(
     >            lune)
        open(unit=lune,file='ele.twi')
        first = .false.
        read(lune,fmt='(a)',err=99,end=98) txt800
        lmnt = 0
c      write(*,*) ' bmad2z/getTwi name :',name(debstr(name):finstr(name))
c      write(*,*) ' bmad2z/getTwi : ',txt800(debstr(txt800):finstr(txt800))
      endif


 1    continue
        lmnt = lmnt + 1
        read(lune,fmt='(a)',err=99,end=98) txt800
        read(txt800,*) s,
     >  betx, alfx,psix,dx,dxp,bety,alfy,psiy,dy,dyp 

        if(strcon(txt800,name(debstr(name):finstr(name)), 
     >                                              is)) then
        else
         txt800_1 =  txt800
         s1 = s
         betx1=betx; alfx1=alfx;dx1=dx;dxp1=dxp
         bety1=bety; alfy1=alfy;dy1=dy;dyp1=dyp
c      write(*,*) ' not name ',betx,alfx,dx,dxp
         goto 1
       endif

       if(iobj .eq. 1) then
         if(s .eq. 0.) then
         else
           betx=betx1; alfx=alfx1;dx=dx1;dxp=dxp1
           bety=bety1; alfy=alfy1;dy=dy1;dyp=dyp1
         endif         
       endif         

c      write(*,*)'bmad2z/getTwi name :',
c     >kSeg,lmnt,name(debstr(name):finstr(name))
c      write(*,*) ' bmad2z/getTwi : ',txt800(debstr(txt800):finstr(txt800))
c      write(*,*) ' bmad2z/getTwi : ',iobj, s
c      write(*,*) ' bmad2z/getTwi : ',s,betx,alfx,dx,dxp
c           read(*,*)

      if(kSeg .eq. 0) then
        lmnt = 0
        rewind(lune)
        read(lune,fmt='(a)',err=99,end=98) txt800
      endif

      return

 97   stop 'Pgm getTwi. Error during read txt800.'

 99   stop 'Pgm getTwi. Error during read twiss.'
      
 98   write(*,*) 'Pgm getTwi. End of file twiss.'
      write(*,*) ' was looking for this text : '
     >//name(debstr(name):finstr(name))
      write(*,*) ' segment is # ',kSeg, ' : ' 
     >//fnwSeg(debstr(fnwSeg):finstr(fnwSeg))
        stop 

      return
      end 

      FUNCTION GTTEXT(NRES,LUNR,TXT,
     >                              TXTIN)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL GTTEXT
      CHARACTER(*) TXT
      CHARACTER(*) TXTIN
      LOGICAL STRCON
      INTEGER DEBSTR, FINSTR

      READ(LUNR,FMT='(A)',ERR=99,END=98)  TXTIN

      DOWHILE(.NOT.STRCON(TXTIN,TXT(DEBSTR(TXT):FINSTR(TXT)),
     >                                                       IS))
        READ(LUNR,FMT='(A)',ERR=99,END=98)  TXTIN
      ENDDO

      GTTEXT = .TRUE.
      GOTO 10

 99   CONTINUE
      IF(NRES.GT.0) THEN
        WRITE(NRES,*) ' Pgm zgoubi/gttext - ERR upon read.' 
        WRITE(NRES,*) ' Text was : ',TXT(DEBSTR(TXT):FINSTR(TXT))
      ENDIF
      GTTEXT = .FALSE.
      GOTO 10

 98   CONTINUE
      IF(NRES.GT.0) THEN
        WRITE(NRES,*) ' Pgm zgoubi/gttext - EOF upon read.' 
        WRITE(NRES,*) ' Text was : ',TXT(DEBSTR(TXT):FINSTR(TXT))
      ENDIF
      GTTEXT = .FALSE.
      GOTO 10

 10   CONTINUE
      RETURN
      END

      subroutine mkSeqFile(mxSeg,mSeg,fnwSeg,pmom,
     >                      alfx0,betx0,dx0,dxp0,
     >                      alfy0,bety0,dy0,dyp0)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      character(*) fnwSeg(*)      
      logical ok, idluni
      integer debstr, finstr

      ok = idluni(
     >            lw)
      OPEN(UNIT=lw,FILE=fnwSeg(mxSeg),IOSTAT=IOS)

      am = 0.510998905d0  ! MeV
      bro = (pmom*1d6) /2.99792458d8    ! T.m 

      it = 0
      iop=1   ! will create OPTICS / 1 ALL PRINT
      call objet(lw,it,iop,pmom,am,bro,
     >                      alfx0,betx0,dx0,dxp0,
     >                      alfy0,bety0,dy0,dyp0,
     > 'bmad2z.out, CEBAF sequence. ')

      do i = 1, mSeg
        write(lw,fmt='(a)') '''INCLUDE'''
        write(lw,fmt='(a)') '1'
        fnwSeg(i) = fnwSeg(i)(debstr(fnwSeg(i)):finstr(fnwSeg(i)))        
        write(lw,fmt='(a)') fnwSeg(i)(1:finstr(fnwSeg(i)))
     >  //'['//fnwSeg(i)(1:finstr(fnwSeg(i))-4)//'_#S:'
     >  //fnwSeg(i)(1:finstr(fnwSeg(i))-4)//'_#E]'
        write(lw,*) ' '
      enddo

        it = it + 1
        write(lw,fmt='(/,A,T111,I6)') '''OPTIONS''' , it
        write(lw,fmt='(A)') '1  1 '
        write(lw,fmt='(A,/)') 'WRITE ON '
        it = it + 1
        write(lw,fmt='(/,A,T111,I6)') '''DRIFT''' , it
        write(lw,fmt='(A)') '0.'

      call fileTail(lw,
     >                 it)
      close(lw)
      return
      end
      subroutine setFitInj(lw,name,
     >            matchName1,matchName2,matchLoc1,matchLoc2, fnwSeg,
     >                      alfx,betx,dx,dxp,
     >                      alfy,bety,dy,dyp,
     >                         it)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      character(*) name, matchName1, matchName2, fnwSeg
      character(25) txt12
      dimension alfx(2),betx(2),dx(2),dxp(2)
      dimension alfy(2),bety(2),dy(2),dyp(2)
      integer debstr, finstr
      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''FIT2''' , it
      write(lw,FMT='(A)') ' 14   noSYSout save FITVALS_'
     >//fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,FMT='(A)') ' 17  5 0  .2  ! MQD0L06 '
      write(lw,FMT='(A)') ' 28  5 0  .2  ! MQB0L07 '
      write(lw,FMT='(A)') ' 41  5 0  .2  ! MQB0L08 '
      write(lw,FMT='(A)') ' 54  5 0  .2  ! MQB0L09 '
      write(lw,FMT='(A)') ' 67  5 0  .2  ! MQB0L10 '
      write(lw,FMT='(A)') ' 83  5 0  .2  ! MQD0R01 '
      write(lw,FMT='(A)') ' 91  5 0  .2  ! MQD0R02 '
      write(lw,FMT='(A)') '104  5 0  .2  ! MQD0R03 '
      write(lw,FMT='(A)') '112  5 0  .2  ! MQD0R04 '
      write(lw,FMT='(A)') '122  5 0  .2  ! MQD0R05 '
      write(lw,FMT='(A)') '132  5 0  .2  ! MQD0R06 '
      write(lw,FMT='(A)') '140  5 0  .2  ! MQD0R07 '
      write(lw,FMT='(A)') '152  5 0  .2  ! MQD0R08 '
      write(lw,FMT='(A)') '166  5 0  .2  ! MQD0R09 '
      call fitSegP(
     >          pnlty_i)
      pnlty = pnlty_i
      write(lw,FMT='(A,1p,e10.1)') ' 8     ',pnlty
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,betx(1)
      write(lw,FMT='(A)') ' 0 1 1  '//txt12
     >//' 1. 0   ! Inj at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,alfx(1)
      write(lw,FMT='(A)') ' 0 1 2  '//txt12
     >//' .2 0   ! Inj at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,dx(1)
      write(lw,FMT='(A)') ' 0 1 6  '//txt12
     >//' .005 0   ! Inj at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,dxp(1)
      write(lw,FMT='(A)') ' 0 2 6  '//txt12
     >//' .002 0   ! Inj at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,bety(1)
      write(lw,FMT='(A)') ' 0 3 3  '//txt12
     >//' 1. 0   ! Inj at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,alfy(1)
      write(lw,FMT='(A)') ' 0 3 4  '//txt12
     >//' .2 0   ! Inj at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(lw,FMT='(A,I4,A)') ' 3 1 2  ',matchLoc1,' 0. .05 0 '       
      write(lw,FMT='(A,I4,A)') ' 3 1 3  ',matchLoc1,' 0. .01 0 '      
      write(lw,FMT='(A,I4,A)') ' '
      return
      end
      subroutine setFitSprE1(lw,name,
     >   matchName1,matchName2,matchLoc1,matchLoc2, fnwSeg,
     >                      alfx,betx,dx,dxp,
     >                      alfy,bety,dy,dyp,
     >                         it)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      character(*) name, matchName1, matchName2, fnwSeg
      character(25) txt12
      dimension alfx(2),betx(2),dx(2),dxp(2)
      dimension alfy(2),bety(2),dy(2),dyp(2)
      integer debstr, finstr
      dimension y(2),yp(2)
          data y / 2*0.d0 /
          data yp / 2*0.d0 /
      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''FIT2''' , it
      write(lw,FMT='(A)') ' 19   noSYSout save FITVALS_'
     >//fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,FMT='(A)') ' 14   6 0 [-1,1] ! VDip '
      write(lw,FMT='(A)') ' 22  5 0 [-1,1] ! VDip '
      write(lw,FMT='(A)') ' 49  5 0 [-1,1] ! VDip '
      write(lw,FMT='(A)') ' 54  5 0 [-1,1] ! VDip '
      write(lw,FMT='(A)') ' 28  5 0  .5  ! MQB1S01 - zro Dy  [.93kG/cm]'
      write(lw,FMT='(A)') ' 46  5 0  .5  ! MQN1S03           [1.5kG/cm]'
      write(lw,FMT='(A)') ' 58  5 0  .5  ! MQN1S04 - alf, bet'
      write(lw,FMT='(A)') ' 64  5 0  .5  ! MQL1S05          [1.88kG/cm]'
      write(lw,FMT='(A)') ' 70  5 0  .5  ! MQB1S06'
      write(lw,FMT='(A)') ' 74  5 0  .5  ! MQL1S07'
      write(lw,FMT='(A)') ' 82  5 0  .5  ! MQL1S08'
      write(lw,FMT='(A)') ' 92  5 0  .5  ! MQL1S09'
      write(lw,FMT='(A)') ' 98  5 0  .5  ! MQB1S10'
      write(lw,FMT='(A)') '120  5 0  .9  ! MQB1E01'
      write(lw,FMT='(A)') '124  5 0  .9  ! MQB1E01'
      write(lw,FMT='(A)') '128  5 0  .9  ! MQB1E01'
      write(lw,FMT='(A)') '110  5 0  .9  ! MQB1E01'
      write(lw,FMT='(A)') '134  5 0  .9  ! MQB1E02'
      write(lw,FMT='(A)') '142  5 0  .9  ! MQB1E03'
      call fitSegP(
     >          pnlty_i)
      pnlty = pnlty_i
      write(lw,FMT='(A,1p,e10.1)') ' 14     ',pnlty
      write(lw,FMT='(A,I4,A)') ' 3 1 4  ',matchLoc1,' 0. .02 0 '     
      write(lw,FMT='(A,I4,A)') ' 3 1 5  ',matchLoc1,' 0. .01 0 '    
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,dy(1)
      write(lw,FMT='(A)') ' 0 3 6  '//' 110  0.0 '
     >//' .005 0   ! SprE1 at '
     >//' MQB1E01'
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,dyp(1)
      write(lw,FMT='(A)') ' 0 4 6  '//' 110  0.0 '
     >//' .002 0   ! SprE1 at '
     >//' MQB1E01'
      write(lw,FMT='(A,I4,A)') ' 3 1 2  ',matchLoc2,' 0. .02 0 '     
      write(lw,FMT='(A,I4,A)') ' 3 1 3  ',matchLoc2,' 0. .01 0 '    
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dx(2)
      write(lw,FMT='(A)') ' 0 1 6  '//txt12
     >//' .005 0   ! SprE1 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dxp(2)
      write(lw,FMT='(A)') ' 0 2 6  '//txt12
     >//' .002 0   ! SprE1 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dy(2)
      write(lw,FMT='(A)') ' 0 3 6  '//txt12
     >//' .005 0   ! SprE1 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dyp(2)
      write(lw,FMT='(A)') ' 0 4 6  '//txt12
     >//' .002 0   ! SprE1 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,betx(2)
      write(lw,FMT='(A)') ' 0 1 1  '//txt12
     >//' 1. 0   ! SprE1 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,alfx(2)
      write(lw,FMT='(A)') ' 0 1 2  '//txt12
     >//' .2 0   ! SprE1 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,bety(2)
      write(lw,FMT='(A)') ' 0 3 3  '//txt12
     >//' 1. 0   ! SprE1 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,alfy(2)
      write(lw,FMT='(A)') ' 0 3 4  '//txt12
     >//' .2 0   ! SprE1 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      return
      end
      subroutine setFitRecE1(lw,name,
     >   matchName1,matchName2,matchLoc1,matchLoc2, fnwSeg,
     >                      alfx,betx,dx,dxp,
     >                      alfy,bety,dy,dyp,
     >                         it)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      character(*) name, matchName1, matchName2, fnwSeg
      character(25) txt12
      dimension alfx(2),betx(2),dx(2),dxp(2)
      dimension alfy(2),bety(2),dy(2),dyp(2)
      integer debstr, finstr
      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''FIT2''' , it
      write(lw,FMT='(A)') ' 17  noSYSout save FITVALS_'
     >//fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,FMT='(A)') ' 14  5 0 .9  ! MQB1R01 - alf, bet'
      write(lw,FMT='(A)') ' 22  5 0 .2  ! MQL1R02'
      write(lw,FMT='(A)') ' 30  5 0 .2  ! MQL1R03'
      write(lw,FMT='(A)') ' 36  5 0 .2  ! MQL1R04'
      write(lw,FMT='(A)') ' 42  5 0 .2  ! MQB1R05'
      write(lw,FMT='(A)') ' 46  5 0 .2  ! MQL1R06'
      write(lw,FMT='(A)') ' 50  5 0 .2  ! MQL1R07'
      write(lw,FMT='(A)') ' 66  5 0 .2  ! MQN1R08 - Dy '
      write(lw,FMT='(A)') ' 76  5 0 .2  ! MQB1R10   '
      write(lw,FMT='(A)') ' 92  5 0 .2  ! MQB1R10   '
      write(lw,FMT='(A)') ' 84  5 0 .2  ! MQB1R10   '
      write(lw,FMT='(A)') ' 61  5 0 .2  ! MQB1R10   '
      write(lw,FMT='(A)') ' 56  5 0 .2  ! MQB1R10   '
      write(lw,FMT='(A)') ' 92  4 0 .2  ! MQB1R10   '
      write(lw,FMT='(A)') ' 84  4 0 .2  ! MQB1R10   '
      write(lw,FMT='(A)') ' 61  4 0 .2  ! MQB1R10   '
      write(lw,FMT='(A)') ' 56  4 0 .2  ! MQB1R10   '
      call fitSegP(
     >          pnlty_i)
      pnlty = pnlty_i
      write(lw,FMT='(A,1p,e10.1)') ' 8     ',pnlty
      write(lw,FMT='(A,I4,A)') ' 3 1 4  ',matchLoc1,' 0. .005 0 '     
      write(lw,FMT='(A,I4,A)') ' 3 1 5  ',matchLoc1,' 0. .002 0 '    
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,betx(1)
      write(lw,FMT='(A)') ' 0 1 1  '//txt12
     >//' 1. 0   ! betx at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,alfx(1)
      write(lw,FMT='(A)') ' 0 1 2  '//txt12
     >//' .2 0   ! alfx at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,bety(1)
      write(lw,FMT='(A)') ' 0 3 3  '//txt12
     >//' 1. 0   ! bety at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,alfy(1)
      write(lw,FMT='(A)') ' 0 3 4  '//txt12
     >//' .2 0   ! alfy at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dy(2)
      write(lw,FMT='(A)') ' 0 3 6  '//txt12
     >//' .005 0   ! etay at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dyp(2)
      write(lw,FMT='(A)') ' 0 4 6  '//txt12
     >//' .002 0   ! etay'' at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(lw,FMT='(A,I4,A)') ' '
      return
      end
      subroutine setFitSprW2(lw,name,
     >   matchName1,matchName2,matchLoc1,matchLoc2, fnwSeg,
     >                      alfx,betx,dx,dxp,
     >                      alfy,bety,dy,dyp,
     >                         it)
C Efficient on decreasing residual dispersion bump observed at s~1500 (middle linN).
C By adding variable B_0 in H dipoles I was able to cancel that bump.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      character(*) name, matchName1, matchName2, fnwSeg
      character(25) txt12
      dimension alfx(2),betx(2),dx(2),dxp(2)
      dimension alfy(2),bety(2),dy(2),dyp(2)
      integer debstr, finstr
      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''FIT2''' , it
      write(lw,FMT='(A)') ' 34    noSYSout save FITVALS_'
     >//fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,FMT='(A)') ' 14  4 0  .05  ! VDip '
      write(lw,FMT='(A)') ' 22  4 0  .05  ! VDip '
      write(lw,FMT='(A)') ' 28  4 0  .05  ! VDip '
      write(lw,FMT='(A)') ' 59  4 0  .05  ! VDip '
      write(lw,FMT='(A)') ' 64  4 0  .05  ! VDip '
      write(lw,FMT='(A)') ' 14  5 0  [-1,1]  ! VDip '
      write(lw,FMT='(A)') ' 22  5 0  [-1,1]  ! VDip '
      write(lw,FMT='(A)') ' 28  5 0  [-1,1]  ! VDip '
      write(lw,FMT='(A)') ' 59  5 0  [-1,1]  ! VDip '
      write(lw,FMT='(A)') ' 64  5 0  [-1,1]  ! VDip '
      write(lw,FMT='(A)') ' 34  5 0  .1  ! MQL2S01 - zro Dy '
      write(lw,FMT='(A)') ' 44  5 0  .1  ! MQA2S02 '
      write(lw,FMT='(A)') ' 52  5 0  .1  ! MQA2S03          '
      write(lw,FMT='(A)') ' 68  5 0  .3  ! MQA2S04 - alf, bet'
      write(lw,FMT='(A)') ' 74  5 0  .3  ! MQC2S05'
      write(lw,FMT='(A)') ' 80  5 0  .9  ! MQC2S06'
      write(lw,FMT='(A)') ' 86  5 0  .3  ! MQC2S07'
      write(lw,FMT='(A)') ' 94  5 0  .3  ! MQC2S08'
      write(lw,FMT='(A)') '102  5 0  .5  ! MQC2S09'
      write(lw,FMT='(A)') '112  5 0  .9  ! MQC2S10'
      write(lw,FMT='(A)') '118  5 0  [-1,1]  ! HDip '
      write(lw,FMT='(A)') '122  5 0  [-1,1]  ! HDip '
      write(lw,FMT='(A)') '131  5 0  [-1,1]  ! HDip '
      write(lw,FMT='(A)') '134  5 0  [-1,1]  ! HDip '
      write(lw,FMT='(A)') '137  5 0  [-1,1]  ! HDip '
      write(lw,FMT='(A)') '143  5 0  [-1,1]  ! HDip '
      write(lw,FMT='(A)') '154  5 0  [-1,1]  ! HDip '
      write(lw,FMT='(A)') '118  4 0    [-1,1]   ! HDip '
      write(lw,FMT='(A)') '122  4 0    [-1,1]   ! HDip '
      write(lw,FMT='(A)') '131  4 0  .1   ! HDip '
      write(lw,FMT='(A)') '134  4 0  .1   ! HDip '
      write(lw,FMT='(A)') '137  4 0  .1   ! HDip '
      write(lw,FMT='(A)') '143  4 0    [-1,1]   ! HDip '
      write(lw,FMT='(A)') '154  4 0    [-1,1]   ! HDip '
      call fitSegP(
     >          pnlty_i)
      pnlty = pnlty_i
      write(lw,FMT='(A,1p,e10.1)') ' 16    ',pnlty
      write(lw,FMT='(A,I4,A)') ' 3 1 2  ',matchLoc2,' 0. .005 0 '       
      write(lw,FMT='(A,I4,A)') ' 3 1 3  ',matchLoc2,' 0. .002 0 '      
      write(lw,FMT='(A,I4,A)') ' 3 1 4  ',matchLoc1,' 0. .005 0 '       
      write(lw,FMT='(A,I4,A)') ' 3 1 5  ',matchLoc1,' 0. .002 0 '      
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,dy(1)
      write(lw,FMT='(A)') ' 0 3 6  '//txt12
     >//' .002 0   ! sprW2 at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,dyp(1)
      write(lw,FMT='(A)') ' 0 4 6  '//txt12
     >//' .001 0   ! sprW2 at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,dx(1)
      write(lw,FMT='(A)') ' 0 1 6  '//txt12
     >//' .01 0   ! sprW2 at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,dxp(1)
      write(lw,FMT='(A)') ' 0 2 6  '//txt12
     >//' .005 0   ! sprW2 at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dx(2)
      write(lw,FMT='(A)') ' 0 1 6  '//txt12
     >//' .01 0   ! sprW2 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dxp(2)
      write(lw,FMT='(A)') ' 0 2 6  '//txt12
     >//' .005 0   ! sprW2 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dy(2)
      write(lw,FMT='(A)') ' 0 3 6  '//txt12
     >//' .002 0   ! sprW2 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dyp(2)
      write(lw,FMT='(A)') ' 0 4 6  '//txt12
     >//' .001 0   ! sprW2 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,betx(2)
      write(lw,FMT='(A)') ' 0 1 1  '//txt12
     >//' 1. 0   ! sprW2 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,alfx(2)
      write(lw,FMT='(A)') ' 0 1 2  '//txt12
     >//' .2 0   ! sprW2 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,bety(2)
      write(lw,FMT='(A)') ' 0 3 3  '//txt12
     >//' 1. 0   ! sprW2 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,alfy(2)
      write(lw,FMT='(A)') ' 0 3 4  '//txt12
     >//' .2 0   ! sprW2 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))

C This works : 
C 'FIT2'                                                          
C 29    save FITVALS_spr_W2
C 14  5 0  [-1,1]  ! VDip
C 22  5 0  [-1,1]  ! VDip
C 28  5 0  [-1,1]  ! VDip
C 59  5 0  [-1,1]  ! VDip
C 64  5 0  [-1,1]  ! VDip
C 34  5 0  .1  ! MQL2S01 - zro Dy
C 44  5 0  .1  ! MQA2S02
C 52  5 0  .1  ! MQA2S03
C 68  5 0  .3  ! MQA2S04 - alf, bet
C 74  5 0  .3  ! MQC2S05
C 80  5 0  .9  ! MQC2S06
C 86  5 0  .3  ! MQC2S07
C 94  5 0  .3  ! MQC2S08
C 102  5 0  .5  ! MQC2S09
C 112  5 0  .9  ! MQC2S10
C 118  5 0  [-1,1]  ! HDip
C 122  5 0  [-1,1]  ! HDip
C 131  5 0  [-1,1]  ! HDip
C 134  5 0  [-1,1]  ! HDip
C 137  5 0  [-1,1]  ! HDip
C 143  5 0  [-1,1]  ! HDip
C 154  5 0  [-1,1]  ! HDip
C 118  4 0    [-1,1]   ! HDip
C 122  4 0    [-1,1]   ! HDip
C 131  4 0  .1   ! HDip
C 134  4 0  .1   ! HDip
C 137  4 0  .1   ! HDip
C 143  4 0    [-1,1]   ! HDip
C 154  4 0    [-1,1]   ! HDip
C 14       1.0E-10
C 0 3 6    70    0.000000E+00      .002 0   ! sprW2 at ITV2S05
C 0 4 6    70    0.000000E+00      .001 0   ! sprW2 at ITV2S05
C 0 1 6    70    0.000000E+00      .01 0   ! sprW2 at ITV2S05
C 0 2 6    70    0.000000E+00      .005 0   ! sprW2 at ITV2S05
C 3 1 2   162 0. .02 0
C 3 1 3   162 0. .01 0
C 0 1 6   162    0.000000E+00      .01 0   ! sprW2 at ARC2M
C 0 2 6   162    0.000000E+00      .005 0   ! sprW2 at ARC2M
C 0 3 6   162    0.000000E+00      .002 0   ! sprW2 at ARC2M
C 0 4 6   162    0.000000E+00      .001 0   ! sprW2 at ARC2M
C 0 1 1   162    2.930920E+01      1. 0   ! sprW2 at ARC2M
C 0 1 2   162   -2.505542E-03      .2 0   ! sprW2 at ARC2M
C 0 3 3   162    3.746845E+00      1. 0   ! sprW2 at ARC2M
C 0 3 4   162   -1.533627E-03      .2 0   ! sprW2 at ARC2M

      return
      end
      subroutine setFitRecW2(lw,name,
     >   matchName1,matchName2,matchLoc1,matchLoc2, fnwSeg,
     >                      alfx,betx,dx,dxp,
     >                      alfy,bety,dy,dyp,
     >                         it)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      character(*) name, matchName1, matchName2, fnwSeg
      character(25) txt12
      dimension alfx(2),betx(2),dx(2),dxp(2)
      dimension alfy(2),bety(2),dy(2),dyp(2)
      integer debstr, finstr
      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''FIT2''' , it
      write(lw,FMT='(A)') ' 20  noSYSout save FITVALS_'
     >//fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,FMT='(A)') ' 14  5 0 .5  ! MQA2R01 - alf, bet'
      write(lw,FMT='(A)') ' 22  5 0 .5  ! MQA2R02'
      write(lw,FMT='(A)') ' 30  5 0 .5  ! MQA2R03'
      write(lw,FMT='(A)') ' 36  5 0 .5  ! MQA2R04'
      write(lw,FMT='(A)') ' 40  5 0 .5  ! MQA2R05'
      write(lw,FMT='(A)') ' 44  5 0 .5  ! MQA2R06'
      write(lw,FMT='(A)') ' 48  5 0 .5  ! MQA2R07'
      write(lw,FMT='(A)') ' 66  5 0 .5  ! MQA2R08 - Dy '
      write(lw,FMT='(A)') ' 70  5 0 .5  ! MQC2R09   '
      write(lw,FMT='(A)') ' 78  5 0 .5  ! MQC2R10   '
      write(lw,FMT='(A)') ' 56  5 0 [-1,1]  ! VDip '
      write(lw,FMT='(A)') ' 61  5 0 [-1,1]  ! VDip '
      write(lw,FMT='(A)') ' 86  5 0 [-1,1]  ! VDip '
      write(lw,FMT='(A)') ' 92  5 0 [-1,1]  ! VDip '
      write(lw,FMT='(A)') '100  5 0 [-1,1]  ! VDip '
      write(lw,FMT='(A)') ' 56  4 0 .1  ! VDip '
      write(lw,FMT='(A)') ' 61  4 0 .1  ! VDip '
      write(lw,FMT='(A)') ' 86  4 0 .1  ! VDip '
      write(lw,FMT='(A)') ' 92  4 0 .1  ! VDip '
      write(lw,FMT='(A)') '100  4 0 .1  ! VDip '
      call fitSegP(
     >          pnlty_i)
      pnlty = pnlty_i
      write(lw,FMT='(A,1p,e10.1)') ' 12     ',pnlty
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,betx(1)
      write(lw,FMT='(A)') ' 0 1 1  '//txt12
     >//' 2. 0   ! betx at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,alfx(1)
      write(lw,FMT='(A)') ' 0 1 2  '//txt12
     >//' .2 0   ! alfx at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,bety(1)
      write(lw,FMT='(A)') ' 0 3 3  '//txt12
     >//' 2. 0   ! bety at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,alfy(1)
      write(lw,FMT='(A)') ' 0 3 4  '//txt12
     >//' .2 0   ! alfy at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,betx(2)
      write(lw,FMT='(A)') ' 0 1 1  '//txt12
     >//' 1. 0   ! betx at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,alfx(2)
      write(lw,FMT='(A)') ' 0 1 2  '//txt12
     >//' .1 0   ! alfx at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,bety(2)
      write(lw,FMT='(A)') ' 0 3 3  '//txt12
     >//' 1. 0   ! bety at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,alfy(2)
      write(lw,FMT='(A)') ' 0 3 4  '//txt12
     >//' .1 0   ! alfy at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dy(2)
      write(lw,FMT='(A)') ' 0 3 6  '//txt12
     >//' .005 0   ! etay at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dyp(2)
      write(lw,FMT='(A)') ' 0 4 6  '//txt12
     >//' .002  0   ! etay'' at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(lw,FMT='(A)') ' 3 1 4  '//txt12
     >//' .005 0   ! etay at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dyp(2)
      write(lw,FMT='(A)') ' 3 1 5  '//txt12
     >//' .002  0   ! etay'' at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(lw,FMT='(A,I4,A)') ' '
      return
      end
      subroutine setFitSprE3(lw,name,
     >   matchName1,matchName2,matchLoc1,matchLoc2, fnwSeg,
     >                      alfx,betx,dx,dxp,
     >                      alfy,bety,dy,dyp,
     >                         it)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      character(*) name, matchName1, matchName2, fnwSeg
      character(25) txt12
      dimension alfx(2),betx(2),dx(2),dxp(2)
      dimension alfy(2),bety(2),dy(2),dyp(2)
      integer debstr, finstr
      dimension y(2),yp(2)
          data y / 2*0.d0 /
          data yp / 2*0.d0 /
      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''FIT2''' , it
      write(lw,FMT='(A)') ' 19   noSYSout save FITVALS_'
     >//fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,FMT='(A)') ' 14   6 0 [-1,1] ! VDip '
      write(lw,FMT='(A)') ' 22  5 0 [-1,1] ! VDip '
      write(lw,FMT='(A)') ' 49  5 0 [-1,1] ! VDip '
      write(lw,FMT='(A)') ' 54  5 0 [-1,1] ! VDip '
      write(lw,FMT='(A)') ' 28  5 0  .5  ! MQB1S01 - zro Dy  [.93kG/cm]'
      write(lw,FMT='(A)') ' 46  5 0  .5  ! MQN1S03           [1.5kG/cm]'
      write(lw,FMT='(A)') ' 58  5 0  .5  ! MQN1S04 - alf, bet'
      write(lw,FMT='(A)') ' 64  5 0  .5  ! MQL1S05          [1.88kG/cm]'
      write(lw,FMT='(A)') ' 70  5 0  .5  ! MQB1S06'
      write(lw,FMT='(A)') ' 74  5 0  .5  ! MQL1S07'
      write(lw,FMT='(A)') ' 82  5 0  .5  ! MQL1S08'
      write(lw,FMT='(A)') ' 92  5 0  .5  ! MQL1S09'
      write(lw,FMT='(A)') ' 98  5 0  .5  ! MQB1S10'
      write(lw,FMT='(A)') '120  5 0  .9  ! MQB1E01'
      write(lw,FMT='(A)') '124  5 0  .9  ! MQB1E01'
      write(lw,FMT='(A)') '128  5 0  .9  ! MQB1E01'
      write(lw,FMT='(A)') '110  5 0  .9  ! MQB1E01'
      write(lw,FMT='(A)') '134  5 0  .9  ! MQB1E02'
      write(lw,FMT='(A)') '142  5 0  .9  ! MQB1E03'
      call fitSegP(
     >          pnlty_i)
      pnlty = pnlty_i
      write(lw,FMT='(A,1p,e10.1)') ' 14     ',pnlty
      write(lw,FMT='(A,I4,A)') ' 3 1 4  ',matchLoc1,' 0. .02 0 '     
      write(lw,FMT='(A,I4,A)') ' 3 1 5  ',matchLoc1,' 0. .01 0 '    
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,dy(1)
      write(lw,FMT='(A)') ' 0 3 6  '//' 110  0.0 '
     >//' .02 0   ! SprE3 at '
     >//' MQB1E01'
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,dyp(1)
      write(lw,FMT='(A)') ' 0 4 6  '//' 110  0.0 '
     >//' .01 0   ! SprE3 at '
     >//' MQB1E01'
      write(lw,FMT='(A,I4,A)') ' 3 1 2  ',matchLoc2,' 0. .02 0 '     
      write(lw,FMT='(A,I4,A)') ' 3 1 3  ',matchLoc2,' 0. .01 0 '    
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dx(2)
      write(lw,FMT='(A)') ' 0 1 6  '//txt12
     >//' .005 0   ! SprE3 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dxp(2)
      write(lw,FMT='(A)') ' 0 2 6  '//txt12
     >//' .002 0   ! SprE3 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dy(2)
      write(lw,FMT='(A)') ' 0 3 6  '//txt12
     >//' .005 0   ! SprE3 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dyp(2)
      write(lw,FMT='(A)') ' 0 4 6  '//txt12
     >//' .002 0   ! SprE3 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,betx(2)
      write(lw,FMT='(A)') ' 0 1 1  '//txt12
     >//' 1. 0   ! SprE3 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,alfx(2)
      write(lw,FMT='(A)') ' 0 1 2  '//txt12
     >//' .1 0   ! SprE3 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,bety(2)
      write(lw,FMT='(A)') ' 0 3 3  '//txt12
     >//' 1. 0   ! SprE3 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,alfy(2)
      write(lw,FMT='(A)') ' 0 3 4  '//txt12
     >//' .1 0   ! SprE3 at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      return
      end
      subroutine setFitRecE3(lw,name,
     >   matchName1,matchName2,matchLoc1,matchLoc2, fnwSeg,
     >                      alfx,betx,dx,dxp,
     >                      alfy,bety,dy,dyp,
     >                         it)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      character(*) name, matchName1, matchName2, fnwSeg
      character(25) txt12
      dimension alfx(2),betx(2),dx(2),dxp(2)
      dimension alfy(2),bety(2),dy(2),dyp(2)
      integer debstr, finstr
      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''FIT2''' , it
      write(lw,FMT='(A)') ' 9   noSYSout save FITVALS_'
     >//fnwSeg(debstr(fnwSeg):finstr(fnwSeg)-4)
      write(lw,FMT='(A)') ' 14  5 0 .4  ! MQB1R01 - alf, bet'
      write(lw,FMT='(A)') ' 22  5 0 .4  ! MQL1R02'
      write(lw,FMT='(A)') ' 30  5 0 .4  ! MQL1R03'
      write(lw,FMT='(A)') ' 36  5 0 .4  ! MQL1R04'
      write(lw,FMT='(A)') ' 42  5 0 .4  ! MQB1R05'
      write(lw,FMT='(A)') ' 46  5 0 .4  ! MQL1R06'
      write(lw,FMT='(A)') ' 50  5 0 .4  ! MQL1R07'
      write(lw,FMT='(A)') ' 66  5 0 .4  ! MQN1R08 - Dy '
      write(lw,FMT='(A)') ' 76  5 0 .4  ! MQB1R10   '
      call fitSegP(
     >          pnlty_i)
      pnlty = pnlty_i
      write(lw,FMT='(A,1p,e10.1)') ' 6     ',pnlty
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,betx(1)
      write(lw,FMT='(A)') ' 0 1 1  '//txt12
     >//' 1. 0   ! betx at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,alfx(1)
      write(lw,FMT='(A)') ' 0 1 2  '//txt12
     >//' .1 0   ! alfx at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,bety(1)
      write(lw,FMT='(A)') ' 0 3 3  '//txt12
     >//' 1. 0   ! bety at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc1,alfy(1)
      write(lw,FMT='(A)') ' 0 3 4  '//txt12
     >//' .1 0   ! alfy at '
     >//matchName1(debstr(matchName1):finstr(matchName1))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dy(2)
      write(lw,FMT='(A)') ' 0 3 6  '//txt12
     >//' .005 0   ! etay at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(txt12,fmt='(i4,2x,1p,e14.6)') matchLoc2,dyp(2)
      write(lw,FMT='(A)') ' 0 4 6  '//txt12
     >//' .002 0   ! etay'' at '
     >//matchName2(debstr(matchName2):finstr(matchName2))
      write(lw,FMT='(A,I4,A)') ' '
      return
      end
      subroutine fileTail(lw,
     >                       it)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      logical ok, idluni
c      it = it + 1
c      write(lw,fmt='(/,A,T111,I6)') '''OPTIONS''' , it
c      write(lw,fmt='(A)') '1  1 '
c      write(lw,fmt='(A,/)') 'WRITE ON '

      it = it + 1
      write(lw,fmt='(/,A,T111,I6)') '''FAISCEAU''' , it

      it = it + 1
      write(lw,fmt='(A,T111,I6)') '''MATRIX''',it
      write(lw,fmt='(A)')   '1  0 '
c      it = it + 1
c      write(lw,fmt='(A,T111,I6)') '''TWISS''',it
c      write(lw,fmt='(A)')   '2  1. 1. '

      it = it + 1
      write(lw,fmt='(A,T111,I6)') '''END''',it

C      it = it + 1
      write(lw,fmt='(///,A)') ' '
      write(lw,fmt='(///,A)') '''REBELOTE'''
      write(lw,fmt='(A)')   '600 0.1 99'
      return
      end



      subroutine fitSegPnlty(pnlty_sgmnt)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      save pnlty
      pnlty = pnlty_sgmnt
      return
      entry fitSegP(
     >           pnlty_sgmnt_o)
      pnlty_sgmnt_o = pnlty
      return
      end
