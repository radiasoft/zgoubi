c read tunes from zpop as following from prior exec of zgoubi
      logical exs, strcon, first, result
      character txt132*132, txt10*10
      character rep*1
      
      data lunIn, lunOut, lunData / 7, 8, 13 / 
      data first / .true. /

      CHARACTER  HMS*8, DMY*9

      write(6,*) 
      write(6,*) '--------------------------------------------'
      write(6,*) ' scanKXi procedure now launched...' 

C Tunes from multiturn
      kTunes = 1
C Tunes from MATIX
      kTunes = 2

C---------- Input data ------------------
c      xKmi = 1.
c      xKma = 5.
c      nK = 2
c      xiDegMi = 20.
c      xiDegMa = 60.
c      nXi = 2
c      nCO = 7  ! number of closed orbits to be computed
      open(unit=lunData,file='scanKXi.data')
      read(lunData,*) xKmi,dK,nK
      read(lunData,*) xiDegMi,dxiDeg, nXi
      read(lunData,*) nCO
      close(lunData)
      if(nK.le.0) stop '  wrong value nK  '
      if(nXi.le.0) stop  '  wrong valeu nXi '
      xKma = xMi + dK*(nK-1.)
      xiDegMa = xiDegMi + dxiDeg * (nXi-1.)
      write(6,*) '  xKmi,xKma,dK,nK  : ',xKmi,xKma,dK,nK
      write(6,*) '  xiDegMi,xiDegMa,dXi,nXi : ',xiDegMi,xiDegMa,
     >                    dxiDeg, nXi
      write(6,*) '  nCO : ', nCO
C----------------------------------------

C Scratch old scanKXi.out
      inquire(file='scanKXi.out',EXIST=EXS)
      if (exs) then
        open(unit=lunOut,name='scanKXi.out')
        close(unit=lunOut,status='delete')
      endif
      open(unit=lunOut,name='scanKXi.out')

c      dK = (xKma - xKmi)/(nK-1.)
      pi = 4. * atan(1.)
c      dxi = (xiDegMa-xiDegMi)/180.*pi  / (nXi -1.)
      dxi = dxiDeg/180.*pi

      CALL TIME(HMS)
      CALL DATE(DMY)
      WRITE(* ,103) DMY,HMS
 103  FORMAT(/,'  Date :  ',A9,',   time :  ',A8)
      read(hms(1:2),fmt='(i2)') IH     
      read(hms(4:5),fmt='(i2)') MIN
      read(hms(7:8),fmt='(i2)') ISEC      
      read(dmy(1:2),fmt='(i2)') ID
      read(dmy(8:9),fmt='(i2)') IY

      xKi = xKmi - dK
      do k = 1, nK

        result = .true.
        xK = xKi + float(k) *dK
        xi = xiDegMi     /180.*pi
        do ix = 1, nXi

          if(.not. result .and. xiDeg.gt. 50.d0) goto 10

          xiDeg = xi*180./pi
          write(lunOut,*) xK, xiDeg, '  ',nCO,
     >        '  index, spiral angle (rad), # co'

C Change K and xi values in lattice.data
          call change('lattice.data_init','lattice.data',xK,xiDeg,
     >                                              nCellI,r0I,pfI,gapI)

          open(unit=34,file='tempKXi.dum')
          write(34,*) xK,xiDeg
          close(34)

C Run geneMap = generate field map, given K, xi ; 
C geneMap also generates initial coordinates near closed orbits 
C       together with data file for zgoubi
          call ellap(id,ih,min,ix,k,nK,nXi)
          call system('~/zgoubi/struct/ffag/tools/spiralFFAG/geneFieldMa
     >p/geneMap')

C Starting from initial coordinates near closed orbits, look for precise co's
C First, copy zgoubi.dat as generated by geneMap, into input file for searchCO
          call ellap(id,ih,min,ix,k,nK,nXi)
          call system('cp -f zgoubi.dat zgoubi_searchCO-In.dat')
          call system('~/zgoubi/struct/ffag/tools/spiralFFAG/geneFieldMa
     >p/searchCO')

          if(kTunes.eq.1) then
C Starting from closed orbits, compute tunes by FT
            call ellap(id,ih,min,ix,k,nK,nXi)
            call system('cp -f zgoubi_searchCO-Out.dat zgoubi.dat ')
            call track
            call system('~/zgoubi/struct/ffag/tools/spiralFFAG/geneField
     >Map/tunesFromFai')
          elseif(kTunes.eq.2) then
C Compute tunes by MATRIX
            call ellap(id,ih,min,ix,k,nK,nXi)
            call system('cp -f zgoubi_searchCO-Out_MATRIX.dat 
     >                                                 zgoubi.dat ')
            call track
            call system('~/zgoubi/struct/ffag/tools/spiralFFAG/geneField
     >Map/tunesFromMatrix')
          endif
          if(first) then
            call system('mv scanKXi.out_Qs scanKXi.out_Qs_save')
            first = .false.
          endif
          call system('cat tunes.out >> scanKXi.out_Qs')

c            pause

C Starting from closed orbits, get stability limits
c          call system('~/zgoubi/struct/ffag/tools/spiralFFAG/geneFieldMa
c     >p/searchStabLim')
 
          xi = xi + dxi
 10       continue

        enddo  !xi
      enddo  !k

      close(lunOut)

      stop
      end

      FUNCTION STRCON(STR,STRIN,NCHAR,
     >                                IS)
      LOGICAL STRCON
      CHARACTER STR*(*), STRIN*(*)
C     ------------------------------------------------------------------------
C     .TRUE. if the string STR contains the string STRIN with NCHAR characters
C     at least once.
C     IS = position of first occurence of STRIN in STR
C     ------------------------------------------------------------------------

      INTEGER DEBSTR,FINSTR

      II = 0
      DO 1 I = DEBSTR(STR), FINSTR(STR)
        II = II+1
        IF( STR(I:I+NCHAR-1) .EQ. STRIN ) THEN
          IS = II
          STRCON = .TRUE.
          RETURN
        ENDIF
 1    CONTINUE
      STRCON = .FALSE.
      RETURN
      END
      FUNCTION DEBSTR(STRING)
      INTEGER DEBSTR
      CHARACTER * (*) STRING

C     --------------------------------------
C     RENVOIE DANS DEBSTR LE RANG DU
C     1-ER CHARACTER NON BLANC DE STRING,
C     OU BIEN 0 SI STRING EST VIDE ou BLANC.
C     --------------------------------------

      DEBSTR=0
      LENGTH=LEN(STRING)
C      LENGTH=LEN(STRING)+1
1     CONTINUE
        DEBSTR=DEBSTR+1
C        IF(DEBSTR .EQ. LENGTH) RETURN
C        IF (STRING(DEBSTR:DEBSTR) .EQ. ' ') GOTO 1
        IF (STRING(DEBSTR:DEBSTR) .EQ. ' ') THEN
          IF(DEBSTR .EQ. LENGTH) THEN
            DEBSTR = 0
            RETURN
          ELSE
            GOTO 1
          ENDIF
        ENDIF

      RETURN
      END
      FUNCTION FINSTR(STRING)
      INTEGER FINSTR
      CHARACTER * (*) STRING
C     --------------------------------------
C     RENVOIE DANS FINSTR LE RANG DU
C     DERNIER CHARACTER NON BLANC DE STRING,
C     OU BIEN 0 SI STRING EST VIDE ou BLANC.
C     --------------------------------------

      FINSTR=LEN(STRING)+1
1     CONTINUE
        FINSTR=FINSTR-1
        IF(FINSTR .EQ. 0) RETURN
        IF (STRING(FINSTR:FINSTR) .EQ. ' ') GOTO 1

      RETURN
      END
      subroutine srchCO(nCO,xK,xiDeg,k,ix,
     >                                   result)
C Starting from initial coordinates near closed orbits, as read from input file 
C zgoubi.dat (possibly generated by geneMap), look for precise co's
      parameter (lunR=11,lunW=12)
      character txt132*132, let*1
      parameter (nCOmx=99)
      dimension x(nCOmx),xp(nCOmx),z(nCOmx),
     >                   zp(nCOmx),s(nCOmx),d(nCOmx),let(nCOmx)
      dimension clorb(6,nCOmx)
      logical ok, result, strcon, first
      data ok, first / .false., .true. /

      result = .false.

      if(nCO.gt.nCOmx) stop ' Too many co''s...'

C If geneMap prior to scanKXi, then zgoubi.dat results from geneMap
C First save zgobui.dat inot zgoubi_scanKXi.dat 
      call system('cp -f zgoubi.dat zgoubi_scanKXi.dat')
      call system('rm zgoubi.dat')

      open(unit=lunR,file='zgoubi_scanKXi.dat')

      jo = 1
      jok = 0
 2    continue

        open(unit=lunW,file='zgoubi.dat')
        rewind(lunW)
        rewind(lunR)

C Read till "KOBJ"
        do i=1,4
          read(lunR,fmt='(a)') txt132
          write(lunW,*) txt132
        enddo
C Read till "IMAX IMAXT"
          read(lunR,fmt='(a)') txt132
          txt132 = ' 1  1'
          write(lunW,*) txt132
C Read all initial traj in zgoubi.dat, supposed to be near co's
        do i=1,nCO
          read(lunR,*) x(i),xp(i),z(i),zp(i),s(i),d(i),let(i)
        enddo
C Retains only one initial traj at a time
        write(lunW,fmt='(1p,2e14.6,2e9.1,e9.1,e12.4,4a,i4)') 
     >    x(jo),xp(jo),z(jo),zp(jo),s(jo),d(jo),' ','''',let(jo),'''',jo
        write(6,*) 
        write(6,*) ' ---------    New trajectory :'
        write(6,fmt='(1p,2e14.6,2e9.1,e9.1,e12.4,4a,i4)') 
     >    x(jo),xp(jo),z(jo),zp(jo),s(jo),d(jo),' ','''',let(jo),'''',jo
        write(6,*)
C Completes zgoubi.dat with the rest of zgoubi_scanKXi.dat
 1      continue
          read(lunR,fmt='(a)',end=10) txt132
          write(lunW,*) txt132   
        goto 1

 10     continue
        close(lunW)
c            pause
        call avrorb(jo,xK,xiDeg,kix,
     >                          xav,xpav,zav,zpav,sav,dav,kex,ok)

        if(ok) then 
          jok = jok + 1
          write(6,*) 
          write(6,*) ' ---------    Found ',jok,' average orbits, ',
     >      ' now #',jo,' :'
          write(6,fmt='(1p,2e14.6,2e9.1,e9.1,e12.4)') 
     >                          xav,xpav,zav,zpav,sav,dav
          write(6,*)
          clorb(1,jok) = xav
          clorb(2,jok) = xpav
          clorb(3,jok) = zav
          clorb(4,jok) = zpav
          clorb(5,jok) = sav
          clorb(6,jok) = dav
        endif
        result = result .or. ok        

        write(*,*) ' jo / nCO :    ', jo,' / ',nCO
        if(jo.ge. nCO) goto 60
        jo = jo+1
      goto 2

 60   continue
c      write(*,fmt='(1p,i3,a,6g12.4)') jo,' : ',xav,xpav,zav,zpav,sav,dav
c      pause
      close(lunR)

Create zgoubi.dat containing closed orbits
      open(unit=lunR,file='zgoubi_scanKXi.dat')
      open(unit=lunW,file='zgoubi_Qs.dat')
C Read/write till "KOBJ"
        do i=1,4
          read(lunR,fmt='(a)') txt132
          write(lunW,fmt='(a)') txt132
        enddo
C Read/write "IMAX IMAXT"
        read(lunR,fmt='(a)') txt132
        write(lunW,fmt='(i3,a)') jok,'  1'
C Write co coordinates
        do j=1,jok
          read(lunR,fmt='(a)') txt132
          write(lunW,fmt='(1p,2e14.6,2e9.1,e9.1,e12.4,4a,i4)') 
     >    clorb(1,j), clorb(2,j), clorb(3,j), clorb(4,j),
     >     clorb(5,j), clorb(6,j),' ','''',let(j),''' ',j
        enddo
        do j=1,nCO-jok
          read(lunR,fmt='(a)') txt132
        enddo
C Completes zgoubi.dat with the rest of dum.dat
 61   continue
        read(lunR,fmt='(a)',end=62) txt132
        write(lunW,*) txt132   
        if(strcon(txt132,'REBELOTE',8,
     >                                IS)) then 
        read(lunR,fmt='(a)',end=62) txt132
C 300 tours pour recherche tunes
c        write(lunW,*) ' 99  0.3 99 '
        write(lunW,*) ' 299  0.3 99 '
        endif
      goto 61
 62   close(lunR)
      close(lunW)

      write(*,*) ' '
      write(*,*) '--------------'
      write(*,fmt='(a,i2,a,i2,a)') ' New zgoubi_Qs.dat contains the ',
     >jok,' co''s below (over ',nCO,' trajectories launched) :'
      do j=1,jok
        write(*,fmt='(1p,2e14.6,2e9.1,e9.1,e12.4,4a,i4)') 
     >  clorb(1,j), clorb(2,j), clorb(3,j), clorb(4,j),
     >  clorb(5,j), clorb(6,j),' ','''',let(j),''' ',j
      enddo
      write(*,*) ' '
      if(first) then
        call system('mv -f scanKXi.out_COs  scanKXi.out_COs_save')
        first = .false.
      endif
      open(unit=33,file='dum.temp')
      do j=1,jok
        write(33,fmt='(1p,2e14.6,2e9.1,e9.1,e12.4,4a,i4,2e12.4)') 
     >  clorb(1,j), clorb(2,j), clorb(3,j), clorb(4,j),
     >  clorb(5,j), clorb(6,j),' ','''',let(j),''' ',j,xK,xiDeg
      enddo
      write(33,*) ' '
      close(33)
      call system('cat dum.temp >> scanKXi.out_COs')

c            pause '  END SEARCH CO '

      return
      end

      subroutine track
      write(6,*) 
      write(6,*) '-----'
      write(6,*) ' Now tracking multiturn, busy...' 
      call system('~/zgoubi/source/zgoubi')
      return
      end

      subroutine calSta
C Starting from closed orbits, get stability limits
      return
      end
       
      subroutine avrorb(jo,xK,xiDeg,k,ix,
     >                              xav,xpav,zav,zpav,s,d,kex,ok)
      logical existCO, convCO ,ok
      parameter (lunR=13,lunW=14)
      character txt132*132, let*1
C Requested precision on co (cm, mrad)
      parameter (precX=.2, precXp=2.)

      dx = 0.   !cm
      ddx = 0.1
      dxp = .0  ! mrad
      ddxp = 2.
      iter = 1
 2    continue

C Run zgoubi with single traj
      call system('~/zgoubi/source/zgoubi')
c      pause
C Get initial Traj coord, and average orbit, from zgoubi.res
      call getPUs(
     >            x,xp,z,zp,s,d,let,xav,xpav,zav,zpav,kex)
      existCO = kex.eq.1
      if(existCO) then
        write(6,*) 
        write(6,*) ' -----  CO #',jo,' does exist...'
        write(6,*)
        convCO = (abs(x-xav).le.precX) .and. (abs(xp-xpav).le.precXp) 
c        write(*,*) '  convergence : ',abs(x-xav), abs(xp-xpav)
        if (convCO) then
          ok = .true.
          return
        else
          write(6,*) ' ------------ now seeking precision on CO #',jo
          write(6,*) ' k, ix : ',k,ix,'  (K, xi :',xK,xiDeg,')'
          write(6,*)
          xn = xav
          xpn = xpav 
          zn = zav
          zpn = zpav
          sn = s
        endif
      else
        write(6,*) 
        write(6,*) ' -----  Could not find CO #',jo,' trying again...'
        write(6,*)
        dx = dx + ddx
        xn = x + dx*(-1)**iter
        dxp = dxp + ddxp
        xpn = xp + dxp*(-1)**iter
        zn = z
        zpn = zp
        sn = s
      endif      
      call system('cp -f zgoubi.dat dum.dat')
      close(lunR)
      close(lunW)
      open(unit=lunR,file='dum.dat')
      open(unit=lunW,file='zgoubi.dat')
C Read/write till "KOBJ"
        do i=1,4
          read(lunR,fmt='(a)') txt132
          write(lunW,fmt='(a)') txt132
        enddo
C Read/write "IMAX IMAXT"
        read(lunR,fmt='(a)') txt132
        write(lunW,fmt='(a)') '1  1'
C Write best co coordinates
        read(lunR,fmt='(a)') txt132
        write(lunW,fmt='(1p,2e14.6,2e9.1,e9.1,e12.4,4a,i4)') 
     >    xn,xpn,zn,zpn,sn,d,' ','''',let,''' ',jo
        write(*,fmt='(1p,a,2e14.6,2e9.1,e9.1,e12.4,4a,i4)') 
     >   ' New object : ', xn,xpn,zn,zpn,sn,d,' ','''','A','''',jo
C Completes zgoubi.dat with the rest of dum.dat
 1    continue
        read(lunR,fmt='(a)',end=10) txt132
        write(lunW,fmt='(a)') txt132   
      goto 1

 10   continue
      iter = iter+1
      if(iter.le.10) then
         close(lunR)
         close(lunW)
         goto 2
      else
         ok = .false.
         goto 99
      endif

 99   return
      end

      subroutine getPUs(
     >            xn,xpn,zn,zpn,s,d,let,xav,xpav,zav,zpav,kex)
C Get initial Traj coord, and average orbit, from zgoubi.res
      character let*(*)
C Read pick-ups from last pass in zgoubi.res, and cumulates in readPU.out
C This software assumes use of REBELOTE with writes inhibited - so that PU readouts 
C are written in zgoubi.res at first and last pass only. 

      character txt*20, txt2*132

      logical strcon, first
      integer debstr, finstr
      data lunR / 15 /

      open(unit=lunR,name='zgoubi.res') 

      first = .true.

 10   continue

      if(first) then
C On cherche la 1ere traj.
c      write(*,*) ' Now first,  '
        read(lunR,*,end=18,err=19) txt
c      write(*,*) '                txt is : ', txt
        if(strcon(txt,'OBJET',5,
     >                          IS)) then 
          read(lunR,*,end=18,err=19) txt
          read(lunR,*,end=18,err=19) txt
          read(lunR,*,end=18,err=19) txt
C Read trajectory
          read(lunR,*) xn,xpn,zn,zpn,s,d,let
c          write(*,*) '****** OBJET : ',xn,xpn,zn,zpn,s,d,' ',let
        else
          goto 10
        endif
      endif

 12   continue
C On cherche 'PU#'
c      write(*,*) ' Looking for PU#,  '
      read(lunR,*,end=18,err=19) txt
c      write(*,*) '                now txt is : ', txt
      if(strcon(txt,'PU#',3,
     >                      IS)) then 
        if(first) then
c          write(6,*) '  Found expression ''PU#''.  First time.'
          first=.false.
          goto 10
        else
c          write(6,*) '  Found expression ''PU#'',  again.'
          goto 11
        endif
      else
        goto 12
      endif

 11   continue
        write(6,*) ' Now reading PU contents, writing to readPU.out...'
        read(lunR,*,end=18,err=19) txt

C read units are :                    cm cm mrd cm mrd
c        read(lunR,100,end=18,err=19) npu, s, xav, xpav, zav, zpav
c 100    format(1p,i6,e16.7,4e12.4)
        read(lunR,*,end=18,err=19) npu, s, xav, xpav, zav, zpav

 90     continue
        write(6,*)  ' ' 
        write(6,*)  '----------' 
        write(6,*)  '  Job completed !!',xav, xpav, zav, zpav
        write(*,*) ' OBJET was : ',xn,xpn,zn,zpn,s,d,' ',let
        write(*,*) '  Found  : ',npu, s, xav, xpav, zav, zpav
        write(6,*)  ' ' 
        write(6,*)  ' ' 
        kex = 1
      goto 99

 18   continue
      kex = 0
c      write(*,*) ' sbr getPUs * End of readPU upon EOFile *    '
      goto 99

 19   continue
      kex = 0
c      write(*,*) ' sbr getPUs * End of readPU upon read error *   '
 99   close(lunR)
      return
      end
      subroutine gotoEnd(lun,
     >                       ncoRun)
      character*20 txt
      logical strcon
      ncoRun = 0
C On cherche 'Closed'
 10   read(lun,fmt='(A)',end=98,err=99) txt
      if(strcon(txt,'% Closed',8,
     >                         IS)) then 
        ncoRun = ncoRun + 1 
      endif
      goto 10
      return
 98   write(6,*) '  * End of readPU/gotoEnd upon EOFile *    '
      return
 99   write(6,*) '  * End of readPU/gotoEnd upon read error in *'
      return
      end
      subroutine change(nameIn,nameOut,xK,xiDeg, 
     >                                          nCell,r0,pf,gap)
      character*(*) nameIn, nameOut
      character*132 txt132
      logical strcon
      integer debstr

      open(unit=9,name=nameIn)
      open(unit=10,name=nameOut)

      read(9,fmt='(a)',end=99)  txt132  !! reads comment line. Next line is to be K
      write(10,fmt='(a)') txt132

      read(9,fmt='(a)',end=99) txt132   !! line that contains K=***
      write(10,fmt='(a,1p,g12.4,a)') 'K = ',xK, '!do not move this line'

      read(9,fmt='(a)',end=99) txt132   !! line that contains xiDeg=***
      write(10,fmt='(a,1p,g12.4,a)') 'xiDeg = ',xiDeg, 
     > '!do not move this line'

      read(9,fmt='(a)',end=99)  txt132
      write(10,fmt='(a)') txt132
      if (STRCON(txt132,'=',1,
     >                       IS)) then
        read(txt132(IS+1:132),*) nCell
      endif 
      read(9,fmt='(a)',end=99)  txt132
      write(10,fmt='(a)') txt132
      if (STRCON(txt132,'=',1,
     >                       IS)) then
        read(txt132(IS+1:132),*) r0
      endif
      read(9,fmt='(a)',end=99)  txt132
      write(10,fmt='(a)') txt132
      if (STRCON(txt132,'=',1,
     >                       IS)) then
        read(txt132(IS+1:132),*) pf
      endif
      read(9,fmt='(a)',end=99)  txt132
      write(10,fmt='(a)') txt132
      if (STRCON(txt132,'=',1,
     >                       IS)) then
        read(txt132(IS+1:132),*) gap
      endif
 1    read(9,fmt='(a)',end=99)  txt132
      write(10,fmt='(a)') txt132
      goto 1
 99   close(9)
      close(10)
      return
      end
      subroutine ellap(id,ih,min,ix,k,nK,nXi)
      CHARACTER  HMS*8, DMY*9
          WRITE(6,*)
          WRITE(6   ,103) DMY,HMS
 103      FORMAT(/,'  Date :  ',A9,',   time :  ',A8)
          CALL TIME(HMS(1:8))
          CALL DATE(DMY(1:9))
          WRITE(6   ,103) DMY,HMS
          read(hms(1:2),fmt='(i2)') IHC     
          read(hms(4:5),fmt='(i2)') MINC
          read(hms(7:8),fmt='(i2)') ISECC      
          read(dmy(1:2),fmt='(i2)') IDC
          read(dmy(8:9),fmt='(i2)') IYC
          elap=float(idc-id)*86400.d0+float(ihc-ih)*3600.d0
     >               +float(minc-min)*60.d0+float(idc-id)*1.d0
          WRITE(6,*) ' Ellapsed time : ',elap,' sec.'
          write(6,*) ' Estimated remaining time : ',  
     >      elap/float(ix*k)*float(nK-k)*float(nXi-ix)/3600.d0,'  hours'
          WRITE(6,*)
c               pause
      return
      end
