#!/usr/bin/env bash

# Perform CI testing in the desired docker image passed as the first argument
# default to radiasoft/beamsim-part1 if no first argument is passed

set -o pipefail
set -o nounset
set -o errexit

docker run -i --rm -u vagrant -v "$PWD":/home/vagrant/src/radiasoft/zgoubi "${1:-radiasoft/beamsim-part1}" bash <<-'EOF'
    #!/bin/bash
    source ~/.bashrc
    cat /etc/shells
    chsh /bin/bash
    cat ~/.bashrc
    set -v
    # Install tau commander for profiling
    which curl
    type -P curl
    command -pv curl
    which gcc
    which gfortran
    which g++
    export CC=$(command -pv gcc)
    export CXX=$(command -pv g++)
    export FC=$(command -pv gfortran)
    $CC --version
    $FC --version
    $CXX --version
    mkdir -p ~/src/ParaTools/taucmdr
    git clone --branch=unstable https://github.com/ParaToolsInc/taucmdr.git ~/src/ParaTools/taucmdr
    cd ~/src/ParaTools/taucmdr
    make SHELL=/bin/bash clean ; make SHELL=/bin/bash INSTALLDIR=/home/vagrant/taucmdr install
    export PATH=/home/vagrant/taucmdr/bin
    # zgoubi specific install
    cd ~/src/radiasoft/zgoubi
    tau init --linkage dynamic --mpi F --target=beamsim-p1 --application zgoubi --project zgoubi --cc $CC --cxx $CXX --fc $FC --os Linux
    # See available hardware counters on platform, who knows what will happen inside docker
    tau metrics
    if [[ -d "${BUILD_DIR:-cmake-build}" ]] ; then
        echo \
            "Warning: Using an old/dirty build directory! Please run 'rm -r ${BUILD_DIR:-cmake-build}' and try again if script fails." >&2
    else
        mkdir "${BUILD_DIR:-cmake-build}"
    fi
    cd "${BUILD_DIR:-cmake-build}"
    # Unless MPI_init() is called, or other circumstances are met, TAU needs
    # dynamically linked executables in order to use sampling correctly
    cmake -DCMAKE_Fortran_COMPILER_LAUNCHER=tau -DBUILD_SHARED_LIBS -Wdev -DCMAKE_INSTALL_PREFIX=$(pyenv prefix) ..
    make -j $(nproc)
    # ctest --output-on-failure
    # make install
EOF
